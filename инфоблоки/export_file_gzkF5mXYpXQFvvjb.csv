IE_XML_ID;IE_NAME;IE_ID;IE_ACTIVE;IE_ACTIVE_FROM;IE_ACTIVE_TO;IE_PREVIEW_PICTURE;IE_PREVIEW_TEXT;IE_PREVIEW_TEXT_TYPE;IE_DETAIL_PICTURE;IE_DETAIL_TEXT;IE_DETAIL_TEXT_TYPE;IE_CODE;IE_SORT;IE_TAGS;IP_PROP10;IP_PROP11;IP_PROP14;IC_GROUP0;IC_GROUP1;IC_GROUP2
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://developer.mozilla.org/en-US/docs/Web/HTML;Документация от MDN;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://developer.mozilla.org/en-US/docs/Web/HTML; Курсы от HTML Academy;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://developer.mozilla.org/en-US/docs/Web/HTML;Learnyouhtml;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://htmlacademy.ru/;Документация от MDN;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://htmlacademy.ru/; Курсы от HTML Academy;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://htmlacademy.ru/;Learnyouhtml;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://github.com/denysdovhan/learnyouhtml;Документация от MDN;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://github.com/denysdovhan/learnyouhtml; Курсы от HTML Academy;;;
67;Html 5;67;Y;;;;HTML — (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — язык разметки, определяющий структуру веб-страниц. Большинство веб-страниц в интернете содержат описание разметки на языке HTML.;text;;;text;;500;;Trainee;https://github.com/denysdovhan/learnyouhtml;Learnyouhtml;;;
68;CSS (flex, grid);68;Y;;;;"CSS — формальный язык описания внешнего вида документа, написанного с использованием языка разметки. Именно CSS делает Ваш HTML ""красивым"".";text;;;text;;500;;Trainee;;;;;
69;Figma;69;Y;;;;Figma — кросс-платформенный онлайн-сервис для дизайнеров интерфейсов и веб-разработчиков. Figma позволяет разрабатывать интерфейсы в онлайн-приложении. У Figma две ключевые особенности: доступ к макету прямо из окна браузера и возможность совместной работы над документами. Вам, как веб-разработчику, необходимо уметь работать с макетами, которые Вы получаете от дизайнера. Figma прекрасно подходит для этой работы.;text;;;text;;500;;Trainee;https://www.figma.com/;Официальный сайт Figma;;;
69;Figma;69;Y;;;;Figma — кросс-платформенный онлайн-сервис для дизайнеров интерфейсов и веб-разработчиков. Figma позволяет разрабатывать интерфейсы в онлайн-приложении. У Figma две ключевые особенности: доступ к макету прямо из окна браузера и возможность совместной работы над документами. Вам, как веб-разработчику, необходимо уметь работать с макетами, которые Вы получаете от дизайнера. Figma прекрасно подходит для этой работы.;text;;;text;;500;;Trainee;https://www.figma.com/;"HTMLacademy - ""Старт в Figma для верстальщика""";;;
69;Figma;69;Y;;;;Figma — кросс-платформенный онлайн-сервис для дизайнеров интерфейсов и веб-разработчиков. Figma позволяет разрабатывать интерфейсы в онлайн-приложении. У Figma две ключевые особенности: доступ к макету прямо из окна браузера и возможность совместной работы над документами. Вам, как веб-разработчику, необходимо уметь работать с макетами, которые Вы получаете от дизайнера. Figma прекрасно подходит для этой работы.;text;;;text;;500;;Trainee;https://htmlacademy.ru/blog/boost/tools/figma;Официальный сайт Figma;;;
69;Figma;69;Y;;;;Figma — кросс-платформенный онлайн-сервис для дизайнеров интерфейсов и веб-разработчиков. Figma позволяет разрабатывать интерфейсы в онлайн-приложении. У Figma две ключевые особенности: доступ к макету прямо из окна браузера и возможность совместной работы над документами. Вам, как веб-разработчику, необходимо уметь работать с макетами, которые Вы получаете от дизайнера. Figma прекрасно подходит для этой работы.;text;;;text;;500;;Trainee;https://htmlacademy.ru/blog/boost/tools/figma;"HTMLacademy - ""Старт в Figma для верстальщика""";;;
70;VS Code, PHP Storm (любой редактор);70;Y;;;;;text;;;text;;500;;Trainee;;;;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://sass-lang.com/documentation;Официальная документация;;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://sass-lang.com/documentation;" WebDesignMaster - ""Sass для самых маленьких - подробное руководство""";;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://sass-lang.com/documentation;Learn SASS;;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://www.youtube.com/watch?v=H4cG4tbc-xQ;Официальная документация;;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://www.youtube.com/watch?v=H4cG4tbc-xQ;" WebDesignMaster - ""Sass для самых маленьких - подробное руководство""";;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://www.youtube.com/watch?v=H4cG4tbc-xQ;Learn SASS;;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://github.com/workshopper/learn-sass;Официальная документация;;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://github.com/workshopper/learn-sass;" WebDesignMaster - ""Sass для самых маленьких - подробное руководство""";;;
71;Препроцессоры sass, scss;71;Y;;;;"SASS — это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS кода и упрощения файлов каскадных таблиц стилей. Язык SASS имеет два синтаксиса: SASS — отличается отсутствием фигурных скобок, в нём вложенные элементы реализованы с помощью отступов; SCSS (Sassy CSS) — использует фигурные скобки, как и сам CSS. По своей сути SASS и SCSS - это препроцессоры для CSS с разным синтаксисом. Они позволяют быстрее и ""элегантнее"" писать CSS. мы предлагаем рассмотреть SASS, так как он является более элегантным и популярным решением.";text;;;text;;500;;Junior;https://github.com/workshopper/learn-sass;Learn SASS;;;
72;PUG;72;Y;;;;"Pug — препроцессор HTML и шаблонизатор, который был написан на JavaScript для Node.js. Он позволяет быстрее и ""элегантнее"" писать HTML.";text;;;text;;500;;Junior;https://pugjs.org/api/getting-started.html;Официальная документация;;;
72;PUG;72;Y;;;;"Pug — препроцессор HTML и шаблонизатор, который был написан на JavaScript для Node.js. Он позволяет быстрее и ""элегантнее"" писать HTML.";text;;;text;;500;;Junior;https://pugjs.org/api/getting-started.html;Развернутый туториал на GitHub;;;
72;PUG;72;Y;;;;"Pug — препроцессор HTML и шаблонизатор, который был написан на JavaScript для Node.js. Он позволяет быстрее и ""элегантнее"" писать HTML.";text;;;text;;500;;Junior;https://gist.github.com/neretin-trike/53aff5afb76153f050c958b82abd9228;Официальная документация;;;
72;PUG;72;Y;;;;"Pug — препроцессор HTML и шаблонизатор, который был написан на JavaScript для Node.js. Он позволяет быстрее и ""элегантнее"" писать HTML.";text;;;text;;500;;Junior;https://gist.github.com/neretin-trike/53aff5afb76153f050c958b82abd9228;Развернутый туториал на GitHub;;;
73;Полноценная работа с DevTools;73;Y;;;;;text;;;text;;500;;Junior;;;;;
74;BEM;74;Y;;;;Методология БЭМ создана в Яндексе для разработки сайтов, которые надо делать быстро,а поддерживать долгие годы. Она позволяет создавать расширяемые и повторно используемые компоненты интерфейса.;text;;;text;;500;;Junior;https://ru.bem.info/methodology/quick-start/;Официальная документация;;;
75;Vue or React (basic);75;Y;;;;"React — это очень популярная JavaScript-библиотека с открытым исходным кодом для создания пользовательских интерфейсов.
Vue - прогрессивный JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов. Как React, только не так.
";text;;;text;;500;;Junior+;https://vuejs.org/v2/guide/;Официальная документация;;;
75;Vue or React (basic);75;Y;;;;"React — это очень популярная JavaScript-библиотека с открытым исходным кодом для создания пользовательских интерфейсов.
Vue - прогрессивный JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов. Как React, только не так.
";text;;;text;;500;;Junior+;https://vuejs.org/v2/guide/;Vue JS 2 - The Complete Guide (incl. Vue Router & Vuex);;;
75;Vue or React (basic);75;Y;;;;"React — это очень популярная JavaScript-библиотека с открытым исходным кодом для создания пользовательских интерфейсов.
Vue - прогрессивный JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов. Как React, только не так.
";text;;;text;;500;;Junior+;https://coursehunters.net/course/udemy-vuejs-2;Официальная документация;;;
75;Vue or React (basic);75;Y;;;;"React — это очень популярная JavaScript-библиотека с открытым исходным кодом для создания пользовательских интерфейсов.
Vue - прогрессивный JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов. Как React, только не так.
";text;;;text;;500;;Junior+;https://coursehunters.net/course/udemy-vuejs-2;Vue JS 2 - The Complete Guide (incl. Vue Router & Vuex);;;
76;SVG animation;76;Y;;;;;text;;;text;;500;;Junior+;;;;;
77;CSS animation (key frames);77;Y;;;;;text;;;text;;500;;Junior+;;;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Tools/Profiler;Документация от MDN;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Tools/Profiler;Официальные рекомендации от Google;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Tools/Profiler;Официальная документация Google PageSpeed Insights;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Tools/Profiler;Официальная документация Lighthouse;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Tools/Profiler;Полезные проекты и инструменты для работы с Chrome DevTools;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Tools/Profiler;Perfschool;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ru;Документация от MDN;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ru;Официальные рекомендации от Google;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ru;Официальная документация Google PageSpeed Insights;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ru;Официальная документация Lighthouse;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ru;Полезные проекты и инструменты для работы с Chrome DevTools;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ru;Perfschool;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/speed/docs/insights/v5/about;Документация от MDN;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/speed/docs/insights/v5/about;Официальные рекомендации от Google;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/speed/docs/insights/v5/about;Официальная документация Google PageSpeed Insights;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/speed/docs/insights/v5/about;Официальная документация Lighthouse;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/speed/docs/insights/v5/about;Полезные проекты и инструменты для работы с Chrome DevTools;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/speed/docs/insights/v5/about;Perfschool;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/tools/lighthouse/;Документация от MDN;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/tools/lighthouse/;Официальные рекомендации от Google;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/tools/lighthouse/;Официальная документация Google PageSpeed Insights;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/tools/lighthouse/;Официальная документация Lighthouse;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/tools/lighthouse/;Полезные проекты и инструменты для работы с Chrome DevTools;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://developers.google.com/web/tools/lighthouse/;Perfschool;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://tproger.ru/translations/chrome-devtools/;Документация от MDN;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://tproger.ru/translations/chrome-devtools/;Официальные рекомендации от Google;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://tproger.ru/translations/chrome-devtools/;Официальная документация Google PageSpeed Insights;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://tproger.ru/translations/chrome-devtools/;Официальная документация Lighthouse;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://tproger.ru/translations/chrome-devtools/;Полезные проекты и инструменты для работы с Chrome DevTools;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://tproger.ru/translations/chrome-devtools/;Perfschool;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://github.com/bevacqua/perfschool;Документация от MDN;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://github.com/bevacqua/perfschool;Официальные рекомендации от Google;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://github.com/bevacqua/perfschool;Официальная документация Google PageSpeed Insights;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://github.com/bevacqua/perfschool;Официальная документация Lighthouse;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://github.com/bevacqua/perfschool;Полезные проекты и инструменты для работы с Chrome DevTools;;;
78;Оптимизация;78;Y;;;;Анализ и оптимизация — процессы, построенный на оценке производительности, дизайна и юзабилити сайтов и приложений. По результатам анализа разработчикам даются рекомендации по улучшению кода за счёт использования сервисов и техник оптимизации. Скорость сайта состоит из 2 частей: как быстро загружается страница и как быстро работает код в ней. Многие сервисы, такие как минификаторы или CDN, помогают ускорить загрузку, но скорость работы кода зависит только от вас. Небольшие изменения в коде могут давать огромные изменения в производительности. Всего несколько строк могут означать разницу между быстрым сайтом и диалогом “Unresponsive Script”;text;;;text;;500;;Junior+;https://github.com/bevacqua/perfschool;Perfschool;;;
79;Javascript (advanced) ES6+;79;Y;;;;"Продвинутый уровень JavaScript для продвинутых разработчиков.
ES6+ — это новые возможности языка программирования JavaScript, появившихся в 6 и более поздних редакциях стандарта ECMAScript.";text;;;text;;500;;Junior+;;;;;
80;Vue or React (advanced);80;Y;;;;"React — это очень популярная JavaScript-библиотека с открытым исходным кодом для создания пользовательских интерфейсов.
Vue - прогрессивный JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов. Как React, только не так.";text;;;text;;500;;Middle;;;;;
81;VueX;81;Y;;;;Vuex — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle;;;;;
82;Babel;82;Y;;;;"Babel.JS – это транспайлер, переписывающий код на ES-2015 в код на предыдущем стандарте ES5. Берёт код ""нового образца"" и полифилит его в код ""старого образца"". Всё просто.";text;;;text;;500;;Middle;;;;;
83;React (advanced);83;Y;;;;React — это очень популярная JavaScript-библиотека с открытым исходным кодом для создания пользовательских интерфейсов.;text;;;text;;500;;Middle+;;;;;
84;Vue (advanced);84;Y;;;;Vue - прогрессивный JavaScript-фреймворк с открытым исходным кодом для создания пользовательских интерфейсов. Как React, только не так.;text;;;text;;500;;Middle+;;;;;
85;TypeScript;85;Y;;;;TypeScript — язык программирования, представленный Microsoft в 2012 году и позиционируемый как средство разработки веб-приложений, расширяющее возможности JavaScript. TypeScript отличается от JavaScript возможностью явного статического назначения типов, поддержкой использования полноценных классов (как в традиционных объектно-ориентированных языках), а также поддержкой подключения модулей, что призвано повысить скорость разработки, облегчить читаемость, рефакторинг и повторное использование кода, помочь осуществлять поиск ошибок на этапе разработки и компиляции, и, возможно, ускорить выполнение программ.;text;;;text;;500;;Middle+;https://www.typescriptlang.org/docs/home.html;Официальная документация;;;
86;JSDoc;86;Y;;;;Комментирование кода - хорошо, а документирование - ещё лучше! Такие инстументы, как JSDoc, помогут Вам сделать поддержку вашего кода проще и приятнее.;text;;;text;;500;;Middle+;https://jsdoc.app/;Официальная документация;;;
86;JSDoc;86;Y;;;;Комментирование кода - хорошо, а документирование - ещё лучше! Такие инстументы, как JSDoc, помогут Вам сделать поддержку вашего кода проще и приятнее.;text;;;text;;500;;Middle+;https://jsdoc.app/;Небольшая статья на тему документрирования кода;;;
86;JSDoc;86;Y;;;;Комментирование кода - хорошо, а документирование - ещё лучше! Такие инстументы, как JSDoc, помогут Вам сделать поддержку вашего кода проще и приятнее.;text;;;text;;500;;Middle+;https://dev.by/news/kak-priuchit-razrabotchikov-dokumentirovat-svoy-kod;Официальная документация;;;
86;JSDoc;86;Y;;;;Комментирование кода - хорошо, а документирование - ещё лучше! Такие инстументы, как JSDoc, помогут Вам сделать поддержку вашего кода проще и приятнее.;text;;;text;;500;;Middle+;https://dev.by/news/kak-priuchit-razrabotchikov-dokumentirovat-svoy-kod;Небольшая статья на тему документрирования кода;;;
87;Algorithms analysis and design;87;Y;;;;Анализ и построение алгоритмов;text;;;text;;500;;Senior;https://e-maxx.ru/bookz/files/cormen.pdf;"Книга ""Алгоритмы: Анализ и построение""";;;
88;Data structures realisation;88;Y;;;;Реализация структур данных;text;;;text;;500;;Senior;https://www.youtube.com/watch?v=9KvA4hDDSjk;"Тимур Шемсединов - ""Структуры данных: списки, стек, очередь, дэк в JavaScript""";;;
88;Data structures realisation;88;Y;;;;Реализация структур данных;text;;;text;;500;;Senior;https://www.youtube.com/watch?v=9KvA4hDDSjk;Алгоритмы и структуры данных на JavaScript;;;
88;Data structures realisation;88;Y;;;;Реализация структур данных;text;;;text;;500;;Senior;https://www.youtube.com/watch?v=PI5rMkqPODI&list=PLIFGfLqvZ-yGHI2Fg0NCgi7FY0h1yh-af;"Тимур Шемсединов - ""Структуры данных: списки, стек, очередь, дэк в JavaScript""";;;
88;Data structures realisation;88;Y;;;;Реализация структур данных;text;;;text;;500;;Senior;https://www.youtube.com/watch?v=PI5rMkqPODI&list=PLIFGfLqvZ-yGHI2Fg0NCgi7FY0h1yh-af;Алгоритмы и структуры данных на JavaScript;;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://developer.mozilla.org/ru/docs/Web/JavaScript/Memory_Management;Документация от MDN;;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://developer.mozilla.org/ru/docs/Web/JavaScript/Memory_Management;"Учебник Ильи Кантора ""learn.javascript.ru"" - Управление памятью в JavaScript";;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://developer.mozilla.org/ru/docs/Web/JavaScript/Memory_Management;"Статья на Medium - ""Быстрый курс по управлению памятью""";;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://learn.javascript.ru/memory-management;Документация от MDN;;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://learn.javascript.ru/memory-management;"Учебник Ильи Кантора ""learn.javascript.ru"" - Управление памятью в JavaScript";;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://learn.javascript.ru/memory-management;"Статья на Medium - ""Быстрый курс по управлению памятью""";;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://medium.com/devschacht/a-crash-course-in-memory-management-b4863e000a5f;Документация от MDN;;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://medium.com/devschacht/a-crash-course-in-memory-management-b4863e000a5f;"Учебник Ильи Кантора ""learn.javascript.ru"" - Управление памятью в JavaScript";;;
89;Javascript Memory;89;Y;;;;"Низкоуровневые языки программирования (например, C) имеют низкоуровневые примитивы для управления памятью, такие как malloc() и free(). В JavaScript же память выделяется динамически при создании сущностей (т.е., объектов, строк и т.п.) и ""автоматически"" освобождается, когда они больше не используются. Последний процесс называется сборкой мусора . Слово ""автоматически"" является источником путаницы и зачастую создает у программистов на JavaScript (и других высокоуровневых языках) ложное ощущение, что они могут не заботиться об управлении памятью.";text;;;text;;500;;Senior;https://medium.com/devschacht/a-crash-course-in-memory-management-b4863e000a5f;"Статья на Medium - ""Быстрый курс по управлению памятью""";;;
90;Javascript memory leaks;90;Y;;;;Утечки памяти - (англ. memory leak) — процесс неконтролируемого уменьшения объёма свободной оперативной или виртуальной памяти компьютера, связанный с ошибками в работающих программах, вовремя не освобождающих ненужные участки памяти, или с ошибками системных служб контроля памяти.;text;;;text;;500;;Senior;;;;;
91;Основы работы DevTools;91;Y;;;;;text;;;text;;500;;Trainee;;;;;
92;Emmet;92;Y;;;;Emmet - инструмент, который помогает быстрее писать html и css. В большинстве редакторов есть из коробки;text;;;text;;500;;Trainee;https://docs.emmet.io/;Официальная документация;;;
93;SSH;93;Y;;;;SSH - Secure Shell — «безопасная оболочка» — сетевой протокол прикладного уровня, позволяющий производить удалённое управление операционной системой и туннелирование TCP-соединений (например, для передачи файлов). Схож по функциональности с протоколами Telnet и rlogin, но, в отличие от них, шифрует весь трафик, включая и передаваемые пароли. SSH допускает выбор различных алгоритмов шифрования. SSH-клиенты и SSH-серверы доступны для большинства сетевых операционных систем. SSH позволяет безопасно передавать в незащищённой среде практически любой другой сетевой протокол. Таким образом, можно не только удалённо работать на компьютере через командную оболочку, но и передавать по шифрованному каналу звуковой поток или видео (например, с веб-камеры). Также SSH может использовать сжатие передаваемых данных для последующего их шифрования, что удобно, например, для удалённого запуска клиентов X Window System. Большинство хостинг-провайдеров за определённую плату предоставляет клиентам доступ к их домашнему каталогу по SSH. Это может быть удобно как для работы в командной строке, так и для удалённого запуска программ (в том числе графических приложений).;text;;;text;;500;;Trainee;https://guides.hexlet.io/ssh/;"Hexlet Guides - ""Что такое SSH""";;;
93;SSH;93;Y;;;;SSH - Secure Shell — «безопасная оболочка» — сетевой протокол прикладного уровня, позволяющий производить удалённое управление операционной системой и туннелирование TCP-соединений (например, для передачи файлов). Схож по функциональности с протоколами Telnet и rlogin, но, в отличие от них, шифрует весь трафик, включая и передаваемые пароли. SSH допускает выбор различных алгоритмов шифрования. SSH-клиенты и SSH-серверы доступны для большинства сетевых операционных систем. SSH позволяет безопасно передавать в незащищённой среде практически любой другой сетевой протокол. Таким образом, можно не только удалённо работать на компьютере через командную оболочку, но и передавать по шифрованному каналу звуковой поток или видео (например, с веб-камеры). Также SSH может использовать сжатие передаваемых данных для последующего их шифрования, что удобно, например, для удалённого запуска клиентов X Window System. Большинство хостинг-провайдеров за определённую плату предоставляет клиентам доступ к их домашнему каталогу по SSH. Это может быть удобно как для работы в командной строке, так и для удалённого запуска программ (в том числе графических приложений).;text;;;text;;500;;Trainee;https://guides.hexlet.io/ssh/;Connecting to GitHub with SSH;;;
93;SSH;93;Y;;;;SSH - Secure Shell — «безопасная оболочка» — сетевой протокол прикладного уровня, позволяющий производить удалённое управление операционной системой и туннелирование TCP-соединений (например, для передачи файлов). Схож по функциональности с протоколами Telnet и rlogin, но, в отличие от них, шифрует весь трафик, включая и передаваемые пароли. SSH допускает выбор различных алгоритмов шифрования. SSH-клиенты и SSH-серверы доступны для большинства сетевых операционных систем. SSH позволяет безопасно передавать в незащищённой среде практически любой другой сетевой протокол. Таким образом, можно не только удалённо работать на компьютере через командную оболочку, но и передавать по шифрованному каналу звуковой поток или видео (например, с веб-камеры). Также SSH может использовать сжатие передаваемых данных для последующего их шифрования, что удобно, например, для удалённого запуска клиентов X Window System. Большинство хостинг-провайдеров за определённую плату предоставляет клиентам доступ к их домашнему каталогу по SSH. Это может быть удобно как для работы в командной строке, так и для удалённого запуска программ (в том числе графических приложений).;text;;;text;;500;;Trainee;https://docs.github.com/en/authentication/connecting-to-github-with-ssh;"Hexlet Guides - ""Что такое SSH""";;;
93;SSH;93;Y;;;;SSH - Secure Shell — «безопасная оболочка» — сетевой протокол прикладного уровня, позволяющий производить удалённое управление операционной системой и туннелирование TCP-соединений (например, для передачи файлов). Схож по функциональности с протоколами Telnet и rlogin, но, в отличие от них, шифрует весь трафик, включая и передаваемые пароли. SSH допускает выбор различных алгоритмов шифрования. SSH-клиенты и SSH-серверы доступны для большинства сетевых операционных систем. SSH позволяет безопасно передавать в незащищённой среде практически любой другой сетевой протокол. Таким образом, можно не только удалённо работать на компьютере через командную оболочку, но и передавать по шифрованному каналу звуковой поток или видео (например, с веб-камеры). Также SSH может использовать сжатие передаваемых данных для последующего их шифрования, что удобно, например, для удалённого запуска клиентов X Window System. Большинство хостинг-провайдеров за определённую плату предоставляет клиентам доступ к их домашнему каталогу по SSH. Это может быть удобно как для работы в командной строке, так и для удалённого запуска программ (в том числе графических приложений).;text;;;text;;500;;Trainee;https://docs.github.com/en/authentication/connecting-to-github-with-ssh;Connecting to GitHub with SSH;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;https://github.com/anmedio/junost;Гитхаб;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;https://github.com/anmedio/junost;Хабр;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;https://github.com/anmedio/junost;имя ;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;https://habr.com/ru/post/108985/;Гитхаб;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;https://habr.com/ru/post/108985/;Хабр;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;https://habr.com/ru/post/108985/;имя ;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;ссылка;Гитхаб;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;ссылка;Хабр;;;
94;Code commenting;94;Y;;;;Комментирование кода - очень важная вещь, которой, зачастую, многие принебрегают, особенно этим грешат начинающие разработчики. Комментарии помогают поддерживать и развивать Ваш код как другим разработчикам, так и Вам самим, спустя время. А вы комментируете свой код?;text;;;text;;500;;Trainee;ссылка;имя ;;;
95;Touch typing;95;Y;;;;Слепой метод набора (слепая печать) — методика набора текста «вслепую», то есть не глядя на клавиши печатной машинки или клавиши клавиатуры, используя все (или большинство) пальцы рук.;text;;;text;;500;;Trainee;https://klavogonki.ru/;Клавагонки;;;
95;Touch typing;95;Y;;;;Слепой метод набора (слепая печать) — методика набора текста «вслепую», то есть не глядя на клавиши печатной машинки или клавиши клавиатуры, используя все (или большинство) пальцы рук.;text;;;text;;500;;Trainee;https://klavogonki.ru/;Klava.org;;;
95;Touch typing;95;Y;;;;Слепой метод набора (слепая печать) — методика набора текста «вслепую», то есть не глядя на клавиши печатной машинки или клавиши клавиатуры, используя все (или большинство) пальцы рук.;text;;;text;;500;;Trainee;https://klava.org/delta/#rus_speed;Клавагонки;;;
95;Touch typing;95;Y;;;;Слепой метод набора (слепая печать) — методика набора текста «вслепую», то есть не глядя на клавиши печатной машинки или клавиши клавиатуры, используя все (или большинство) пальцы рук.;text;;;text;;500;;Trainee;https://klava.org/delta/#rus_speed;Klava.org;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics;Документация от MDN;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics;"Учебник Ильи Кантора ""learn.javascript.ru""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics;"Книга ""Eloquent JavaScript""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics;JAVASCRIPTING;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://learn.javascript.ru/;Документация от MDN;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://learn.javascript.ru/;"Учебник Ильи Кантора ""learn.javascript.ru""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://learn.javascript.ru/;"Книга ""Eloquent JavaScript""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://learn.javascript.ru/;JAVASCRIPTING;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;http://eloquentjavascript.net/;Документация от MDN;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;http://eloquentjavascript.net/;"Учебник Ильи Кантора ""learn.javascript.ru""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;http://eloquentjavascript.net/;"Книга ""Eloquent JavaScript""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;http://eloquentjavascript.net/;JAVASCRIPTING;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://github.com/workshopper/javascripting;Документация от MDN;;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://github.com/workshopper/javascripting;"Учебник Ильи Кантора ""learn.javascript.ru""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://github.com/workshopper/javascripting;"Книга ""Eloquent JavaScript""";;;
96;Javascript (basic);96;Y;;;;"JavaScript — язык программирования, который изначально создавался для того, чтобы сделать web-странички «живыми». Однако к 2019 году он серьезно ""вырос"" и сейчас представляет собой язык номер 1 для создания веб-приложений как на стороне клиента, так и на стороне сервера. Под ""базовым"" JS подразумеваются понимание таких вещей, как знание основ, понимание замыканий и областей видимости, умение реализовать и пользоваться встроенными в язык базовыми структурами данных, понимание контекста вызова и умение работать со встроенными объектами. Также нужно уметь работать с DOM и событиями браузера.";text;;;text;;500;;Junior;https://github.com/workshopper/javascripting;JAVASCRIPTING;;;
97;SVG (basic);97;Y;;;;;text;;;text;;500;;Junior;;;;;
98;Git (начальный уровень);98;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior;;;;;
99;CSS animation (начальный уровень);99;Y;;;;;text;;;text;;500;;Junior;;;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://habr.com/ru/company/vertdider/blog/403823/;Легендарный гарвардский курс CS50;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://habr.com/ru/company/vertdider/blog/403823/;Codewars;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://habr.com/ru/company/vertdider/blog/403823/;"Роберт Лафоре. ""Структуры данных и алгоритмы в Java""";;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://habr.com/ru/company/vertdider/blog/403823/;Реализация структур данных на языке JavaScript;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://www.codewars.com/dashboard;Легендарный гарвардский курс CS50;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://www.codewars.com/dashboard;Codewars;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://www.codewars.com/dashboard;"Роберт Лафоре. ""Структуры данных и алгоритмы в Java""";;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://www.codewars.com/dashboard;Реализация структур данных на языке JavaScript;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://vk.com/wall-54530371_11457;Легендарный гарвардский курс CS50;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://vk.com/wall-54530371_11457;Codewars;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://vk.com/wall-54530371_11457;"Роберт Лафоре. ""Структуры данных и алгоритмы в Java""";;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://vk.com/wall-54530371_11457;Реализация структур данных на языке JavaScript;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://code.tutsplus.com/series/data-structures-in-javascript--cms-772;Легендарный гарвардский курс CS50;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://code.tutsplus.com/series/data-structures-in-javascript--cms-772;Codewars;;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://code.tutsplus.com/series/data-structures-in-javascript--cms-772;"Роберт Лафоре. ""Структуры данных и алгоритмы в Java""";;;
100;Computer science (basics);100;Y;;;;Основы программирования и Computer Science - это те самые фундаментальные знания, которые необходимы каждому, кто хочет стать настоящим инженером, ведь нужно не просто знать, как писать код, но и понимать, как этот код работает сейчас и будет работать при других условиях.;text;;;text;;500;;Junior;https://code.tutsplus.com/series/data-structures-in-javascript--cms-772;Реализация структур данных на языке JavaScript;;;
101;Markdown;101;Y;;;;Markdown — облегчённый язык разметки, созданный с целью написания наиболее читаемого и удобного для правки текста, но пригодного для преобразования в языки для продвинутых публикаций.;text;;;text;;500;;Junior;https://www.markdowntutorial.com/;Туториал по Markdown;;;
101;Markdown;101;Y;;;;Markdown — облегчённый язык разметки, созданный с целью написания наиболее читаемого и удобного для правки текста, но пригодного для преобразования в языки для продвинутых публикаций.;text;;;text;;500;;Junior;https://www.markdowntutorial.com/;How-to-markdown;;;
101;Markdown;101;Y;;;;Markdown — облегчённый язык разметки, созданный с целью написания наиболее читаемого и удобного для правки текста, но пригодного для преобразования в языки для продвинутых публикаций.;text;;;text;;500;;Junior;https://github.com/workshopper/how-to-markdown;Туториал по Markdown;;;
101;Markdown;101;Y;;;;Markdown — облегчённый язык разметки, созданный с целью написания наиболее читаемого и удобного для правки текста, но пригодного для преобразования в языки для продвинутых публикаций.;text;;;text;;500;;Junior;https://github.com/workshopper/how-to-markdown;How-to-markdown;;;
102;NPM;102;Y;;;;NPM — менеджер пакетов, входящий в состав Node.js.;text;;;text;;500;;Junior;https://docs.npmjs.com/;Официальная документация;;;
103;Bootstrap (другой фреймворк);103;Y;;;;Bootstrap - это инструментарий с открытым исходным кодом для разработки с помощью HTML, CSS и JS. Наверное самый популярный фреймворк для создания UI.;text;;;text;;500;;Junior;https://bootstrap-4.ru/docs/4.3.1/getting-started/introduction/;Официальная документация;;;
103;Bootstrap (другой фреймворк);103;Y;;;;Bootstrap - это инструментарий с открытым исходным кодом для разработки с помощью HTML, CSS и JS. Наверное самый популярный фреймворк для создания UI.;text;;;text;;500;;Junior;https://bootstrap-4.ru/docs/4.3.1/getting-started/introduction/;"Academind - ""Bootstrap 4 Concepts & Setup | BOOTSTRAP 4 TUTORIAL""";;;
103;Bootstrap (другой фреймворк);103;Y;;;;Bootstrap - это инструментарий с открытым исходным кодом для разработки с помощью HTML, CSS и JS. Наверное самый популярный фреймворк для создания UI.;text;;;text;;500;;Junior;https://www.youtube.com/watch?v=7g8Gg2QVdeU&list=PL55RiY5tL51rLqH4-8LBVlUTIFF70dxhb&ab_channel=Academind;Официальная документация;;;
103;Bootstrap (другой фреймворк);103;Y;;;;Bootstrap - это инструментарий с открытым исходным кодом для разработки с помощью HTML, CSS и JS. Наверное самый популярный фреймворк для создания UI.;text;;;text;;500;;Junior;https://www.youtube.com/watch?v=7g8Gg2QVdeU&list=PL55RiY5tL51rLqH4-8LBVlUTIFF70dxhb&ab_channel=Academind;"Academind - ""Bootstrap 4 Concepts & Setup | BOOTSTRAP 4 TUTORIAL""";;;
104;Gulp (basic);104;Y;;;;Gulp — это таск-менеджер для автоматического выполнения часто используемых задач (например, минификации, тестирования, объединения файлов), написанный на языке программирования JavaScript.;text;;;text;;500;;Junior;;;;;
105;Jquery;105;Y;;;;"Старый добрый JQuery - фреймворк, ""который мы заслужили"". Основная задача - взаимодействие JavaScript и HTML. Помогает легко получать доступ к любому элементу DOM, обращаться к атрибутам и содержимому элементов DOM, манипулировать ими и так далее.";text;;;text;;500;;Junior;https://api.jquery.com/;Официальная документация;;;
106;Debugging;106;Y;;;;Не важно какой именно дебаггер Вы используете - Google Chrome, standalone решение или встренный в вашу IDE или текстовый редактор. Важно, что Вы умеете это делать и понимаете зачем Вы это делаете.;text;;;text;;500;;Junior;;;;;
107;Semantic HTML;107;Y;;;;Семантическая верстка - это подход, который путём правильной вложенности HTML-тегов говорит браузеру не только как показывать контент на странице, но и даёт ему чёткое пояснение роли того или иного контента.;text;;;text;;500;;Junior;https://medium.com/@stasonmars/%D1%81%D0%B5%D0%BA%D1%80%D0%B5%D1%82%D1%8B-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%81%D0%B5%D0%BC%D0%B0%D0%BD%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B8%CC%86-%D0%B2%D0%B5%D1%80%D1%81%D1%82%D0%BA%D0%B8-%D0%B2-html5-c7cd5e6f1ebb;Отличная статья на Medium;;;
108;SEO (метатеги, микрокразметка);108;Y;;;;SEO (Search Engine Optimization, поисковая оптимизация) – это всестороннее развитие и продвижение сайта для его выхода на первые позиции в результатах выдачи поисковых систем (SERPs) по выбранным запросам с целью увеличения посещаемости и дальнейшего получения дохода.;text;;;text;;500;;Junior;https://seo.ru/chto-takoe-seo/#;Статья на сайте SEO.ru;;;
109;JSON;109;Y;;;;JSON (JavaScript Object Notation) - простой формат обмена данными, удобный для чтения и написания как человеком, так и компьютером. Он основан на подмножестве языка программирования JavaScript, определенного в стандарте ECMA-262 3rd Edition - December 1999. JSON - текстовый формат, полностью независимый от языка реализации, но он использует соглашения, знакомые программистам C-подобных языков, таких как C, C++, C#, Java, JavaScript, Perl, Python и многих других. Эти свойства делают JSON идеальным языком обмена данными.;text;;;text;;500;;Junior+;https://www.json.org/json-ru.html;Официальная документация;;;
109;JSON;109;Y;;;;JSON (JavaScript Object Notation) - простой формат обмена данными, удобный для чтения и написания как человеком, так и компьютером. Он основан на подмножестве языка программирования JavaScript, определенного в стандарте ECMA-262 3rd Edition - December 1999. JSON - текстовый формат, полностью независимый от языка реализации, но он использует соглашения, знакомые программистам C-подобных языков, таких как C, C++, C#, Java, JavaScript, Perl, Python и многих других. Эти свойства делают JSON идеальным языком обмена данными.;text;;;text;;500;;Junior+;https://www.json.org/json-ru.html;"Sorax - ""JSON""";;;
109;JSON;109;Y;;;;JSON (JavaScript Object Notation) - простой формат обмена данными, удобный для чтения и написания как человеком, так и компьютером. Он основан на подмножестве языка программирования JavaScript, определенного в стандарте ECMA-262 3rd Edition - December 1999. JSON - текстовый формат, полностью независимый от языка реализации, но он использует соглашения, знакомые программистам C-подобных языков, таких как C, C++, C#, Java, JavaScript, Perl, Python и многих других. Эти свойства делают JSON идеальным языком обмена данными.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=bw10M9RuR30;Официальная документация;;;
109;JSON;109;Y;;;;JSON (JavaScript Object Notation) - простой формат обмена данными, удобный для чтения и написания как человеком, так и компьютером. Он основан на подмножестве языка программирования JavaScript, определенного в стандарте ECMA-262 3rd Edition - December 1999. JSON - текстовый формат, полностью независимый от языка реализации, но он использует соглашения, знакомые программистам C-подобных языков, таких как C, C++, C#, Java, JavaScript, Perl, Python и многих других. Эти свойства делают JSON идеальным языком обмена данными.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=bw10M9RuR30;"Sorax - ""JSON""";;;
110;REST Api;110;Y;;;;;text;;;text;;500;;Junior+;;;;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/Guide/AJAX;Документация MDN;;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/Guide/AJAX;"Loftblog - ""AJAX. Настройка и отправка AJAX запросов""";;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/Guide/AJAX;"Тимур Шемсединов - ""HTTP запросы в браузере и Node.js: XMLHttpRequest, fetch""";;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=lEfp6_ByY-Q;Документация MDN;;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=lEfp6_ByY-Q;"Loftblog - ""AJAX. Настройка и отправка AJAX запросов""";;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=lEfp6_ByY-Q;"Тимур Шемсединов - ""HTTP запросы в браузере и Node.js: XMLHttpRequest, fetch""";;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=wMMki2FEYGY&list=PLHhi8ymDMrQZad6JDh6HRzY1Wz5WB34w0&index=53;Документация MDN;;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=wMMki2FEYGY&list=PLHhi8ymDMrQZad6JDh6HRzY1Wz5WB34w0&index=53;"Loftblog - ""AJAX. Настройка и отправка AJAX запросов""";;;
111;Ajax;111;Y;;;;AJAX - (ˈeɪdʒæks, от англ. Asynchronous JavaScript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных, веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. По-русски иногда произносится транслитом как «аякс». У аббревиатуры AJAX нет устоявшегося аналога на кириллице.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=wMMki2FEYGY&list=PLHhi8ymDMrQZad6JDh6HRzY1Wz5WB34w0&index=53;"Тимур Шемсединов - ""HTTP запросы в браузере и Node.js: XMLHttpRequest, fetch""";;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://ru.makefile.site/;Руководство по современному Make;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://ru.makefile.site/;modern-make-handbook-ru.md;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://ru.makefile.site/;Утилита make: полезный универсальный инструмент программиста;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://github.com/inem/make-handbook/blob/master/modern-make-handbook-ru.md;Руководство по современному Make;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://github.com/inem/make-handbook/blob/master/modern-make-handbook-ru.md;modern-make-handbook-ru.md;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://github.com/inem/make-handbook/blob/master/modern-make-handbook-ru.md;Утилита make: полезный универсальный инструмент программиста;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=pK9mF5aK05Q;Руководство по современному Make;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=pK9mF5aK05Q;modern-make-handbook-ru.md;;;
112;Makefile;112;Y;;;;Makefile - файл, содержащий набор инструкций для программы make. Программа make с помощью этого файла позволяет автоматизировать процесс компиляции программы и выполнять при этом различные действия, но на самом деле все проще и полезнее.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=pK9mF5aK05Q;Утилита make: полезный универсальный инструмент программиста;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://jxnblk.com/blog/why-you-should-learn-css-in-js/;Why you should definitely learn how to use CSS-in-JS;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://jxnblk.com/blog/why-you-should-learn-css-in-js/;CSS-in-JS with React in 2019 — Styled Components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://jxnblk.com/blog/why-you-should-learn-css-in-js/;CSS vs CSS-in-JS (Emotion) example;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://jxnblk.com/blog/why-you-should-learn-css-in-js/;Guide on CSS-in-JS usage;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://jxnblk.com/blog/why-you-should-learn-css-in-js/;Официальная документация Styled-components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://jxnblk.com/blog/why-you-should-learn-css-in-js/;Официальная документация Emotion;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://dev.to/phizzard/let-s-take-a-look-at-css-in-js-with-react-in-2019-styled-components-1olc;Why you should definitely learn how to use CSS-in-JS;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://dev.to/phizzard/let-s-take-a-look-at-css-in-js-with-react-in-2019-styled-components-1olc;CSS-in-JS with React in 2019 — Styled Components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://dev.to/phizzard/let-s-take-a-look-at-css-in-js-with-react-in-2019-styled-components-1olc;CSS vs CSS-in-JS (Emotion) example;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://dev.to/phizzard/let-s-take-a-look-at-css-in-js-with-react-in-2019-styled-components-1olc;Guide on CSS-in-JS usage;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://dev.to/phizzard/let-s-take-a-look-at-css-in-js-with-react-in-2019-styled-components-1olc;Официальная документация Styled-components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://dev.to/phizzard/let-s-take-a-look-at-css-in-js-with-react-in-2019-styled-components-1olc;Официальная документация Emotion;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://alert-refactor.netlify.com/;Why you should definitely learn how to use CSS-in-JS;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://alert-refactor.netlify.com/;CSS-in-JS with React in 2019 — Styled Components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://alert-refactor.netlify.com/;CSS vs CSS-in-JS (Emotion) example;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://alert-refactor.netlify.com/;Guide on CSS-in-JS usage;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://alert-refactor.netlify.com/;Официальная документация Styled-components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://alert-refactor.netlify.com/;Официальная документация Emotion;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.gatsbyjs.org/docs/css-in-js/;Why you should definitely learn how to use CSS-in-JS;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.gatsbyjs.org/docs/css-in-js/;CSS-in-JS with React in 2019 — Styled Components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.gatsbyjs.org/docs/css-in-js/;CSS vs CSS-in-JS (Emotion) example;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.gatsbyjs.org/docs/css-in-js/;Guide on CSS-in-JS usage;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.gatsbyjs.org/docs/css-in-js/;Официальная документация Styled-components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.gatsbyjs.org/docs/css-in-js/;Официальная документация Emotion;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.styled-components.com/docs;Why you should definitely learn how to use CSS-in-JS;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.styled-components.com/docs;CSS-in-JS with React in 2019 — Styled Components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.styled-components.com/docs;CSS vs CSS-in-JS (Emotion) example;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.styled-components.com/docs;Guide on CSS-in-JS usage;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.styled-components.com/docs;Официальная документация Styled-components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://www.styled-components.com/docs;Официальная документация Emotion;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://emotion.sh/docs/introduction;Why you should definitely learn how to use CSS-in-JS;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://emotion.sh/docs/introduction;CSS-in-JS with React in 2019 — Styled Components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://emotion.sh/docs/introduction;CSS vs CSS-in-JS (Emotion) example;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://emotion.sh/docs/introduction;Guide on CSS-in-JS usage;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://emotion.sh/docs/introduction;Официальная документация Styled-components;;;
113;CSS-in-JS;113;Y;;;;CSS-in-JS — техника стилизации компонентов с помощью JavaScript. Прежде всего позволяет облегчить динамическую стилизацию, сократить количество кода, обеспечить «скоупинг» стилей в компонентах. Наиболее развитые и популярные реализации (Styled-components, Emotion) представлены для библиотеки React.;text;;;text;;500;;Junior+;https://emotion.sh/docs/introduction;Официальная документация Emotion;;;
114;Postman;114;Y;;;;Postman - это программа для тестирования работы различных API или просто отправки POST и GET запросов на сервер.;text;;;text;;500;;Junior+;https://learning.getpostman.com/docs/postman/launching_postman/installation_and_updates/;Официальная документация;;;
114;Postman;114;Y;;;;Postman - это программа для тестирования работы различных API или просто отправки POST и GET запросов на сервер.;text;;;text;;500;;Junior+;https://learning.getpostman.com/docs/postman/launching_postman/installation_and_updates/;"Postman ""How To"" Playlist";;;
114;Postman;114;Y;;;;Postman - это программа для тестирования работы различных API или просто отправки POST и GET запросов на сервер.;text;;;text;;500;;Junior+;https://www.youtube.com/playlist?list=PLM-7VG-sgbtCJYpjQfmLCcJZ6Yd74oytQ;Официальная документация;;;
114;Postman;114;Y;;;;Postman - это программа для тестирования работы различных API или просто отправки POST и GET запросов на сервер.;text;;;text;;500;;Junior+;https://www.youtube.com/playlist?list=PLM-7VG-sgbtCJYpjQfmLCcJZ6Yd74oytQ;"Postman ""How To"" Playlist";;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://git-scm.com/doc;Официальная документация;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://git-scm.com/doc;Скринкаст Ильи Кантора;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://git-scm.com/doc;Learn Git Branching;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://git-scm.com/doc;GitHowTo;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learn.javascript.ru/screencast/git;Официальная документация;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learn.javascript.ru/screencast/git;Скринкаст Ильи Кантора;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learn.javascript.ru/screencast/git;Learn Git Branching;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learn.javascript.ru/screencast/git;GitHowTo;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learngitbranching.js.org/;Официальная документация;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learngitbranching.js.org/;Скринкаст Ильи Кантора;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learngitbranching.js.org/;Learn Git Branching;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://learngitbranching.js.org/;GitHowTo;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://githowto.com/ru;Официальная документация;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://githowto.com/ru;Скринкаст Ильи Кантора;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://githowto.com/ru;Learn Git Branching;;;
115;Git;115;Y;;;;Распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux.;text;;;text;;500;;Junior+;https://githowto.com/ru;GitHowTo;;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_Expressions;Документация от MDN;;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_Expressions;"Academind - ""Regular Expressions Demystified""";;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_Expressions;Regex-adventure;;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=0LKdKixl5Ug&list=PL55RiY5tL51ryV3MhCbH8bLl7O_RZGUUE;Документация от MDN;;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=0LKdKixl5Ug&list=PL55RiY5tL51ryV3MhCbH8bLl7O_RZGUUE;"Academind - ""Regular Expressions Demystified""";;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=0LKdKixl5Ug&list=PL55RiY5tL51ryV3MhCbH8bLl7O_RZGUUE;Regex-adventure;;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://github.com/workshopper/regex-adventure;Документация от MDN;;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://github.com/workshopper/regex-adventure;"Academind - ""Regular Expressions Demystified""";;;
116;Regular Expressions;116;Y;;;;"""Если у Вас есть проблема, воспользуйтесь регулярным выражением, чтобы получить две проблемы"". Знаменитая фраза, которая, безусловно, имеет место в реальном мире. Но отнюдь не потому, что регулярные выражения - это плохо, а потому, что ""нужно уметь их готовить"". Регулярные выражения - это формальный язык поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов. Научитесь пользоваться им и многие задачи, которые кажутся Вам сложными, перестанут вызывать у Вас трудности.";text;;;text;;500;;Junior+;https://github.com/workshopper/regex-adventure;Regex-adventure;;;
117;Canvas;117;Y;;;;Элемент HTML5, предназначенный для создания растрового двухмерного изображения при помощи скриптов, обычно на языке JavaScript.;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/API/Canvas_API;Документация от MDN;;;
117;Canvas;117;Y;;;;Элемент HTML5, предназначенный для создания растрового двухмерного изображения при помощи скриптов, обычно на языке JavaScript.;text;;;text;;500;;Junior+;https://developer.mozilla.org/ru/docs/Web/API/Canvas_API;"WebDev с нуля. Канал Алекса Лущенко - ""JavaScript Canvas""";;;
117;Canvas;117;Y;;;;Элемент HTML5, предназначенный для создания растрового двухмерного изображения при помощи скриптов, обычно на языке JavaScript.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=SRM7PYjKuGo&list=PLM7wFzahDYnFnw7aZfmhlpmflYa_Z98sF;Документация от MDN;;;
117;Canvas;117;Y;;;;Элемент HTML5, предназначенный для создания растрового двухмерного изображения при помощи скриптов, обычно на языке JavaScript.;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=SRM7PYjKuGo&list=PLM7wFzahDYnFnw7aZfmhlpmflYa_Z98sF;"WebDev с нуля. Канал Алекса Лущенко - ""JavaScript Canvas""";;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://habr.com/ru/post/144611/;Статья на Habr;;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://habr.com/ru/post/144611/;"Скринкаст на тему ""Что такое SOLID, KISS, DRY и YAGNI?""";;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://habr.com/ru/post/144611/;SOER - G.R.A.S.P | шаблоны проектирования;;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=0qP6Vh8GNM0;Статья на Habr;;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=0qP6Vh8GNM0;"Скринкаст на тему ""Что такое SOLID, KISS, DRY и YAGNI?""";;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=0qP6Vh8GNM0;SOER - G.R.A.S.P | шаблоны проектирования;;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=Kp1nfw0LDXc&t=144s;Статья на Habr;;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=Kp1nfw0LDXc&t=144s;"Скринкаст на тему ""Что такое SOLID, KISS, DRY и YAGNI?""";;;
118;Design principles;118;Y;;;;DRY / KISS / YAGNI / SOLID / GRASP - ключевые принципы разработки ПО, которые Вы должны понимать!;text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=Kp1nfw0LDXc&t=144s;SOER - G.R.A.S.P | шаблоны проектирования;;;
119;Refactoring;119;Y;;;;"Рефакторинг — это контролируемый процесс улучшения кода, без написания новой функциональности. Результат рефакторинга — это чистый код и простой дизайн. В первую очередь рефакторинг - это превращение грязного кода в чистый. Но зачем ""чистить"" грязный код, если можно сразу писать чистый?";text;;;text;;500;;Junior+;https://refactoring.guru/ru/refactoring;Рефакторинг Гуру;;;
119;Refactoring;119;Y;;;;"Рефакторинг — это контролируемый процесс улучшения кода, без написания новой функциональности. Результат рефакторинга — это чистый код и простой дизайн. В первую очередь рефакторинг - это превращение грязного кода в чистый. Но зачем ""чистить"" грязный код, если можно сразу писать чистый?";text;;;text;;500;;Junior+;https://refactoring.guru/ru/refactoring;Тимур Шемсединов - Антипаттерны, рефакторинг и ревью кода;;;
119;Refactoring;119;Y;;;;"Рефакторинг — это контролируемый процесс улучшения кода, без написания новой функциональности. Результат рефакторинга — это чистый код и простой дизайн. В первую очередь рефакторинг - это превращение грязного кода в чистый. Но зачем ""чистить"" грязный код, если можно сразу писать чистый?";text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=NMUsUiFokr4&list=PLHhi8ymDMrQb3PVcPFAUI-ZgtAMkpq9yV;Рефакторинг Гуру;;;
119;Refactoring;119;Y;;;;"Рефакторинг — это контролируемый процесс улучшения кода, без написания новой функциональности. Результат рефакторинга — это чистый код и простой дизайн. В первую очередь рефакторинг - это превращение грязного кода в чистый. Но зачем ""чистить"" грязный код, если можно сразу писать чистый?";text;;;text;;500;;Junior+;https://www.youtube.com/watch?v=NMUsUiFokr4&list=PLHhi8ymDMrQb3PVcPFAUI-ZgtAMkpq9yV;Тимур Шемсединов - Антипаттерны, рефакторинг и ревью кода;;;
121;Axios;121;Y;;;;;text;;;text;;500;;Middle;;;;;
122;ESLint;122;Y;;;;ESLint – это инструмент, который позволяет проводить анализ качества вашего кода, написанного на любом выбранном стандарте JavaScript. Он приводит код к более-менее единому стилю, помогает избежать глупых ошибок, умеет автоматически исправлять многие из найденных проблем и отлично интегрируется со многими инструментами разработки.;text;;;text;;500;;Middle;;;;;
123;Prettier;123;Y;;;;Prettier – инструмент форматирования кода c поддержкой множества языков, минимумом конфигурации и максимумом навязанных правил. Prettier отлично сочетается с любым конфигом eslint, разделяя ответственность: за форматирование отвечает Prettier, за умными штуками вроде неиспользуемых переменных следит eslint. Prettier навязывает правила форматирования, которые вы можете выбрать сами. Не нужно спорить о правилах форматирования, Prettier решает все споры за вас. Также основным удобством Prettier является автоформатирование Вашего кода при сохранении файла. Это экономит очень много времени и сил. Попробуйте и убедитесь сами!;text;;;text;;500;;Middle;;;;;
124;Webpack;124;Y;;;;Webpack — инструмент веб-разработчика, который соединяет JavaScript- и CSS-файлы в единое целое — файл, который часто называется «bundle» (с англ. «пачка»).;text;;;text;;500;;Middle;;;;;
125;Vuetify (аналоги);125;Y;;;;Vuetify — это инструментарий с открытым исходным кодом для разработки с помощью HTML, CSS и JS. Популярный фреймворк для создания UI, как и Bootstrap, но для Vue.;text;;;text;;500;;Middle;;;;;
126;Flux;126;Y;;;;;text;;Flux — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;500;;Middle;;;;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://redux.js.org/introduction/getting-started;Официальная документация;;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://redux.js.org/introduction/getting-started;"CodeDojo - ""Основы Redux""";;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://redux.js.org/introduction/getting-started;"Academind - ""ReactJS + Redux Basics""";;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=-m3evZuzXC8&list=PLqHlAwsJRxANFIgAf7BO8hNYdvipLERxQ;Официальная документация;;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=-m3evZuzXC8&list=PLqHlAwsJRxANFIgAf7BO8hNYdvipLERxQ;"CodeDojo - ""Основы Redux""";;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=-m3evZuzXC8&list=PLqHlAwsJRxANFIgAf7BO8hNYdvipLERxQ;"Academind - ""ReactJS + Redux Basics""";;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51rrC3sh8qLiYHqUV3twEYU_;Официальная документация;;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51rrC3sh8qLiYHqUV3twEYU_;"CodeDojo - ""Основы Redux""";;;
127;Redux;127;Y;;;;Redux — библиотека для JavaScript с открытым исходным кодом, предназначенный для управления состоянием приложения. Чаще всего используется в связке с React или Angular для разработки клиентской части. Содержит ряд инструментов, позволяющих значительно упростить передачу данных хранилища через контекст.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51rrC3sh8qLiYHqUV3twEYU_;"Academind - ""ReactJS + Redux Basics""";;;
128;PWA;128;Y;;;;PWA (Progressive Web App) - Прогрессивное веб-приложение — технология в веб-разработке, которая добавляет сайтам возможности приложений для мобильных устройств. В частности, PWA обладают такими признаками: Устанавливаются на смартфоны или планшеты пользователей, Работают в режиме офлайн благодаря кэшированию контента. Доставляют пользователям пуш-уведомления.;text;;;text;;500;;Middle;;;;;
129;Nodejs (basics);129;Y;;;;Nodejs — программная платформа, основанная на движке V8 (транслирующем JavaScript в машинный код), превращающая JavaScript из узкоспециализированного языка в язык общего назначения. Node.js добавляет возможность JavaScript взаимодействовать с устройствами ввода-вывода через свой API (написанный на C++), подключать другие внешние библиотеки, написанные на разных языках, обеспечивая вызовы к ним из JavaScript-кода. Node.js применяется преимущественно на сервере, выполняя роль веб-сервера, но есть возможность разрабатывать на Node.js и десктопные оконные приложения (при помощи NW.js, AppJS или Electron для Linux, Windows и macOS) и даже программировать микроконтроллеры (например, tessel и espruino).;text;;;text;;500;;Middle;;;;;
130;Binary Data;130;Y;;;;Binary Data - неотъемлемая часть работы любого программиста, однако начинающие разработчики чаще всего пропускают эту важную тему, так как она кажется им достаточно сложной и не особо нужной. Однако это не так. До появления объекта TypedArray в ECMAScript 2015 (ES6), в JavaScript не было механизма для чтения потоков двоичных данных или для выполнения других операций с ними. Класс Buffer был представлен как часть API Node.js, позволяющая взаимодействовать с потоками произвольных двоичных данных в контексте, например, TCP-потоков и операций с файловой системой.;text;;;text;;500;;Middle;;;;;
131;Docker;131;Y;;;;Docker — программное обеспечение для автоматизации развёртывания и управления приложениями в средах с поддержкой контейнеризации. Позволяет «упаковать» приложение со всем его окружением и зависимостями в контейнер, который может быть перенесён на любую Linux-систему с поддержкой cgroups в ядре, а также предоставляет среду по управлению контейнерами.;text;;;text;;500;;Middle;;;;;
132;CI / CD;132;Y;;;;Continuous Integration(CI) и Continuous Delivery (CD) - концепция непрерывной интеграции и доставки. CI/CD реализуется как конвейер, облегчая слияние только что закомиченного кода в основную кодовую базу. Концепция позволяет запускать различные типы тестов на каждом этапе (выполнение интеграционного аспекта) и завершать его запуском с развертыванием закомиченного кода в фактический продукт, который видят конечные пользователи (выполнение доставки).;text;;;text;;500;;Middle;;;;;
133;Weinre;133;Y;;;;WEb INspector REmote. Когда нельзя использовать обычные средства дебага, дебажить можно этим инструментом. Телевизоры, старые телефоны и т.д.;text;;;text;;500;;Middle;;;;;
134;Linux (basics);134;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика.;text;;;text;;500;;Middle;;;;;
135;Cyber security (basics);135;Y;;;;Информационная безопасность (Information Security - InfoSec) - практика предотвращения несанкционированного доступа, использования, раскрытия, искажения, изменения, исследования, записи или уничтожения информации. Основная задача информационной безопасности — сбалансированная защита конфиденциальности, целостности и доступности данных, с учётом целесообразности применения и без какого-либо ущерба производительности организации. Являясь опытным специалистом и профессионалом своего дела, вы должны быть уверены в безопасности создаваемых вами продуктов. Знания механизмов защиты веб приложений и умение пользоваться инструментами из этой области - это то, что позволяет пользователям спать спокойно.;text;;;text;;500;;Middle;;;;;
136;Databases (basics);136;Y;;;;База данных - представленная в объективной форме совокупность самостоятельных материалов (статей, расчётов, нормативных актов, судебных решений и иных подобных материалов), систематизированных таким образом, чтобы эти материалы могли быть найдены и обработаны с помощью электронной вычислительной машины (ЭВМ). В 2020 году самой актуальной является СУБД PostgreSQL (произносится «Пост-Грэс-Кью-Эл») — свободная объектно-реляционная система управления базами данных (СУБД). Она собрала в себе всё лучшее из реляционных и смежных подходов к управлению данными. Сообщество рекомендует изучать именно PostgreSQL, даже если в будущем вам предстаит работать с другими СУБД, после изучения PostgreSQL это не составит вам никакого труда.;text;;;text;;500;;Middle;;;;;
137;Design patterns;137;Y;;;;"Паттерны (или шаблоны) проектирования описывают типичные способы решения часто встречающихся проблем при проектировании программ. В отличие от готовых функций или библиотек, паттерн нельзя просто взять и скопировать в программу. Паттерн представляет собой не какой-то конкретный код, а общую концепцию решения той или иной проблемы, которую нужно будет ещё подстроить под нужды вашей программы. Паттерны проектирования - это фундаментальные знания проектирования программ, без которых Вы будете ""наступать на грабли"" снова и снова.";text;;;text;;500;;Middle;;;;;
138;OOP;138;Y;;;;Объеектно-ориентиированное программирование (ООП) - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования.;text;;;text;;500;;Middle;https://learn.javascript.ru/prototypes;"Илья Кантор и его учебник learn.javascript.ru - ""ООП в прототипном стиле""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://habr.com/ru/post/215605/;"Статья на Habr - ""Паттерны для новичков: MVC vs MVP vs MVVM""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://habr.com/ru/post/215605/;"Статья на Habr - ""Паттерны разработки: MVC vs MVP vs MVVM vs MVI""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://habr.com/ru/post/215605/;"Видео от канала Веб-стандарты - ""Эти страшные буквы MV*""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://habr.com/ru/post/344184/;"Статья на Habr - ""Паттерны для новичков: MVC vs MVP vs MVVM""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://habr.com/ru/post/344184/;"Статья на Habr - ""Паттерны разработки: MVC vs MVP vs MVVM vs MVI""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://habr.com/ru/post/344184/;"Видео от канала Веб-стандарты - ""Эти страшные буквы MV*""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;"Статья на Habr - ""Паттерны для новичков: MVC vs MVP vs MVVM""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;"Статья на Habr - ""Паттерны разработки: MVC vs MVP vs MVVM vs MVI""";;;
139;Development patterns (MV*);139;Y;;;;MVC / MVP / MVVM / MVI - схемы разделения данных приложения, пользовательского интерфейса и управляющей логики на три отдельных компонента: модель, представление и контроллер — таким образом, что модификация каждого компонента может осуществляться независимо. Выбор между различными паттернами разработки, всегда сопровождается рядом споров и дискуссий, а разные взгляды разработчиков на это еще больше усложняют задачу. Существует ли решение этой идеологической проблемы?;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;"Видео от канала Веб-стандарты - ""Эти страшные буквы MV*""";;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;http://kspt.icc.spbstu.ru/media/files/2016/course/lang/slides/lection0.pdf;Презентация по введению в функциональное программирование;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;http://kspt.icc.spbstu.ru/media/files/2016/course/lang/slides/lection0.pdf;"Тимур Шемсединов - ""Functional Programming""";;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;http://kspt.icc.spbstu.ru/media/files/2016/course/lang/slides/lection0.pdf;Functional JavaScript Workshop;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;http://kspt.icc.spbstu.ru/media/files/2016/course/lang/slides/lection0.pdf;Сurrying-workshopper;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;http://kspt.icc.spbstu.ru/media/files/2016/course/lang/slides/lection0.pdf;Luis Atencio - Functional Programming in JavaScript;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.youtube.com/playlist?list=PLHhi8ymDMrQZGa7hYnwBQufg9XXoJr5LP;Презентация по введению в функциональное программирование;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.youtube.com/playlist?list=PLHhi8ymDMrQZGa7hYnwBQufg9XXoJr5LP;"Тимур Шемсединов - ""Functional Programming""";;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.youtube.com/playlist?list=PLHhi8ymDMrQZGa7hYnwBQufg9XXoJr5LP;Functional JavaScript Workshop;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.youtube.com/playlist?list=PLHhi8ymDMrQZGa7hYnwBQufg9XXoJr5LP;Сurrying-workshopper;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.youtube.com/playlist?list=PLHhi8ymDMrQZGa7hYnwBQufg9XXoJr5LP;Luis Atencio - Functional Programming in JavaScript;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/timoxley/functional-javascript-workshop;Презентация по введению в функциональное программирование;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/timoxley/functional-javascript-workshop;"Тимур Шемсединов - ""Functional Programming""";;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/timoxley/functional-javascript-workshop;Functional JavaScript Workshop;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/timoxley/functional-javascript-workshop;Сurrying-workshopper;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/timoxley/functional-javascript-workshop;Luis Atencio - Functional Programming in JavaScript;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/kishorsharma/currying-workshopper;Презентация по введению в функциональное программирование;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/kishorsharma/currying-workshopper;"Тимур Шемсединов - ""Functional Programming""";;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/kishorsharma/currying-workshopper;Functional JavaScript Workshop;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/kishorsharma/currying-workshopper;Сurrying-workshopper;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://github.com/kishorsharma/currying-workshopper;Luis Atencio - Functional Programming in JavaScript;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.manning.com/books/functional-programming-in-javascript;Презентация по введению в функциональное программирование;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.manning.com/books/functional-programming-in-javascript;"Тимур Шемсединов - ""Functional Programming""";;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.manning.com/books/functional-programming-in-javascript;Functional JavaScript Workshop;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.manning.com/books/functional-programming-in-javascript;Сurrying-workshopper;;;
140;Functional programming;140;Y;;;;Functional programming (функциональное программирование) — раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).;text;;;text;;500;;Middle;https://www.manning.com/books/functional-programming-in-javascript;Luis Atencio - Functional Programming in JavaScript;;;
141;SSL / TLS;141;Y;;;;TLS - протокол защиты транспортного уровня, как и его предшественник SSL (англ. secure sockets layer — слой защищённых сокетов), — криптографические протоколы, обеспечивающие защищённую передачу данных между узлами в сети Интернет. TLS и SSL используют асимметричное шифрование для аутентификации, симметричное шифрование для конфиденциальности и коды аутентичности сообщений для сохранения целостности сообщений.;text;;;text;;500;;Middle;https://mnorin.com/tls-ssl-neobhodimy-j-minimum-znanij.html;Отличная статья на тему SSL/TLS;;;
142;SOAP / REST;142;Y;;;;Это архитектурные стили реализации ПО со своими принципами и нюансами.;text;;;text;;500;;Middle;https://medium.com/@nanotexnolagiya/%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-soap-%D0%B8-rest-%D1%81-json-2019-779fef6eba9b;"Статья на Medium - ""Сравнение SOAP и REST с JSON [2019]""";;;
142;SOAP / REST;142;Y;;;;Это архитектурные стили реализации ПО со своими принципами и нюансами.;text;;;text;;500;;Middle;https://medium.com/@nanotexnolagiya/%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-soap-%D0%B8-rest-%D1%81-json-2019-779fef6eba9b;Неплохое видео на тему RESTful приложений;;;
142;SOAP / REST;142;Y;;;;Это архитектурные стили реализации ПО со своими принципами и нюансами.;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=2CrjWD3VGG4;"Статья на Medium - ""Сравнение SOAP и REST с JSON [2019]""";;;
142;SOAP / REST;142;Y;;;;Это архитектурные стили реализации ПО со своими принципами и нюансами.;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=2CrjWD3VGG4;Неплохое видео на тему RESTful приложений;;;
143;HTTP;143;Y;;;;"Протокол передачи гипертекста (Hypertext Transfer Protocol - HTTP) - это прикладной протокол для передачи гипертекстовых документов, таких как HTML. Он создан для связи между веб-браузерами и веб-серверами, хотя в принципе HTTP может использоваться и для других целей. Протокол следует классической клиент-серверной модели, когда клиент открывает соединение для создания запроса, а затем ждет ответа. HTTP - это протокол без сохранения состояния, то есть сервер не сохраняет никаких данных (состояние) между двумя парами ""запрос-ответ"". Несмотря на то, что HTTP основан на TCP/IP, он также может использовать любой другой протокол транспортного уровня с гарантированной доставкой.";text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;Документация от MDN;;;
143;HTTP;143;Y;;;;"Протокол передачи гипертекста (Hypertext Transfer Protocol - HTTP) - это прикладной протокол для передачи гипертекстовых документов, таких как HTML. Он создан для связи между веб-браузерами и веб-серверами, хотя в принципе HTTP может использоваться и для других целей. Протокол следует классической клиент-серверной модели, когда клиент открывает соединение для создания запроса, а затем ждет ответа. HTTP - это протокол без сохранения состояния, то есть сервер не сохраняет никаких данных (состояние) между двумя парами ""запрос-ответ"". Несмотря на то, что HTTP основан на TCP/IP, он также может использовать любой другой протокол транспортного уровня с гарантированной доставкой.";text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;"Лекция Андрея Созыкина из курса ""Компьютерные сети"" - ""Протокол HTTP""";;;
143;HTTP;143;Y;;;;"Протокол передачи гипертекста (Hypertext Transfer Protocol - HTTP) - это прикладной протокол для передачи гипертекстовых документов, таких как HTML. Он создан для связи между веб-браузерами и веб-серверами, хотя в принципе HTTP может использоваться и для других целей. Протокол следует классической клиент-серверной модели, когда клиент открывает соединение для создания запроса, а затем ждет ответа. HTTP - это протокол без сохранения состояния, то есть сервер не сохраняет никаких данных (состояние) между двумя парами ""запрос-ответ"". Несмотря на то, что HTTP основан на TCP/IP, он также может использовать любой другой протокол транспортного уровня с гарантированной доставкой.";text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;Документация от MDN;;;
143;HTTP;143;Y;;;;"Протокол передачи гипертекста (Hypertext Transfer Protocol - HTTP) - это прикладной протокол для передачи гипертекстовых документов, таких как HTML. Он создан для связи между веб-браузерами и веб-серверами, хотя в принципе HTTP может использоваться и для других целей. Протокол следует классической клиент-серверной модели, когда клиент открывает соединение для создания запроса, а затем ждет ответа. HTTP - это протокол без сохранения состояния, то есть сервер не сохраняет никаких данных (состояние) между двумя парами ""запрос-ответ"". Несмотря на то, что HTTP основан на TCP/IP, он также может использовать любой другой протокол транспортного уровня с гарантированной доставкой.";text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;"Лекция Андрея Созыкина из курса ""Компьютерные сети"" - ""Протокол HTTP""";;;
144;TCP;144;Y;;;;Transmission Control Protocol (TCP, протокол управления передачей) — один из основных протоколов передачи данных интернета, предназначенный для управления передачей данных. В стеке протоколов TCP/IP выполняет функции транспортного уровня модели OSI. Механизм TCP предоставляет поток данных с предварительной установкой соединения, осуществляет повторный запрос данных в случае потери данных и устраняет дублирование при получении двух копий одного пакета, гарантируя тем самым, в отличие от UDP, целостность передаваемых данных и уведомление отправителя о результатах передачи. Реализации TCP обычно встроены в ядра ОС. Существуют реализации TCP, работающие в пространстве пользователя. Когда осуществляется передача от компьютера к компьютеру через Интернет, TCP работает на верхнем уровне между двумя конечными системами, например, браузером и веб-сервером. TCP осуществляет надёжную передачу потока байтов от одного процесса к другому. TCP реализует управление потоком, управление перегрузкой, рукопожатие, надёжную передачу.;text;;;text;;500;;Middle;https://developer.mozilla.org/en-US/docs/Glossary/UDP;Документация MDN (описание);;;
144;TCP;144;Y;;;;Transmission Control Protocol (TCP, протокол управления передачей) — один из основных протоколов передачи данных интернета, предназначенный для управления передачей данных. В стеке протоколов TCP/IP выполняет функции транспортного уровня модели OSI. Механизм TCP предоставляет поток данных с предварительной установкой соединения, осуществляет повторный запрос данных в случае потери данных и устраняет дублирование при получении двух копий одного пакета, гарантируя тем самым, в отличие от UDP, целостность передаваемых данных и уведомление отправителя о результатах передачи. Реализации TCP обычно встроены в ядра ОС. Существуют реализации TCP, работающие в пространстве пользователя. Когда осуществляется передача от компьютера к компьютеру через Интернет, TCP работает на верхнем уровне между двумя конечными системами, например, браузером и веб-сервером. TCP осуществляет надёжную передачу потока байтов от одного процесса к другому. TCP реализует управление потоком, управление перегрузкой, рукопожатие, надёжную передачу.;text;;;text;;500;;Middle;https://developer.mozilla.org/en-US/docs/Glossary/UDP;"Лекция Андрея Созыкина из курса ""Компьютерные сети"" - ""Протокол TCP""";;;
144;TCP;144;Y;;;;Transmission Control Protocol (TCP, протокол управления передачей) — один из основных протоколов передачи данных интернета, предназначенный для управления передачей данных. В стеке протоколов TCP/IP выполняет функции транспортного уровня модели OSI. Механизм TCP предоставляет поток данных с предварительной установкой соединения, осуществляет повторный запрос данных в случае потери данных и устраняет дублирование при получении двух копий одного пакета, гарантируя тем самым, в отличие от UDP, целостность передаваемых данных и уведомление отправителя о результатах передачи. Реализации TCP обычно встроены в ядра ОС. Существуют реализации TCP, работающие в пространстве пользователя. Когда осуществляется передача от компьютера к компьютеру через Интернет, TCP работает на верхнем уровне между двумя конечными системами, например, браузером и веб-сервером. TCP осуществляет надёжную передачу потока байтов от одного процесса к другому. TCP реализует управление потоком, управление перегрузкой, рукопожатие, надёжную передачу.;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=CKUOb4htnB4;Документация MDN (описание);;;
144;TCP;144;Y;;;;Transmission Control Protocol (TCP, протокол управления передачей) — один из основных протоколов передачи данных интернета, предназначенный для управления передачей данных. В стеке протоколов TCP/IP выполняет функции транспортного уровня модели OSI. Механизм TCP предоставляет поток данных с предварительной установкой соединения, осуществляет повторный запрос данных в случае потери данных и устраняет дублирование при получении двух копий одного пакета, гарантируя тем самым, в отличие от UDP, целостность передаваемых данных и уведомление отправителя о результатах передачи. Реализации TCP обычно встроены в ядра ОС. Существуют реализации TCP, работающие в пространстве пользователя. Когда осуществляется передача от компьютера к компьютеру через Интернет, TCP работает на верхнем уровне между двумя конечными системами, например, браузером и веб-сервером. TCP осуществляет надёжную передачу потока байтов от одного процесса к другому. TCP реализует управление потоком, управление перегрузкой, рукопожатие, надёжную передачу.;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=CKUOb4htnB4;"Лекция Андрея Созыкина из курса ""Компьютерные сети"" - ""Протокол TCP""";;;
145;UDP;145;Y;;;;Протокол пользовательских датаграмм (User Datagram Protocol — UDP ) — один из ключевых элементов набора сетевых протоколов для Интернета. С UDP компьютерные приложения могут посылать сообщения (в данном случае называемые датаграммами) другим хостам по IP-сети без необходимости предварительного сообщения для установки специальных каналов передачи или путей данных.;text;;;text;;500;;Middle;https://developer.mozilla.org/en-US/docs/Glossary/UDP;Документация MDN (описание);;;
145;UDP;145;Y;;;;Протокол пользовательских датаграмм (User Datagram Protocol — UDP ) — один из ключевых элементов набора сетевых протоколов для Интернета. С UDP компьютерные приложения могут посылать сообщения (в данном случае называемые датаграммами) другим хостам по IP-сети без необходимости предварительного сообщения для установки специальных каналов передачи или путей данных.;text;;;text;;500;;Middle;https://developer.mozilla.org/en-US/docs/Glossary/UDP;"Лекция Андрея Созыкина из курса ""Компьютерные сети"" - ""Протокол UDP""";;;
145;UDP;145;Y;;;;Протокол пользовательских датаграмм (User Datagram Protocol — UDP ) — один из ключевых элементов набора сетевых протоколов для Интернета. С UDP компьютерные приложения могут посылать сообщения (в данном случае называемые датаграммами) другим хостам по IP-сети без необходимости предварительного сообщения для установки специальных каналов передачи или путей данных.;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;Документация MDN (описание);;;
145;UDP;145;Y;;;;Протокол пользовательских датаграмм (User Datagram Protocol — UDP ) — один из ключевых элементов набора сетевых протоколов для Интернета. С UDP компьютерные приложения могут посылать сообщения (в данном случае называемые датаграммами) другим хостам по IP-сети без необходимости предварительного сообщения для установки специальных каналов передачи или путей данных.;text;;;text;;500;;Middle;https://www.youtube.com/watch?v=5WgsKtlHUls;"Лекция Андрея Созыкина из курса ""Компьютерные сети"" - ""Протокол UDP""";;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://developer.mozilla.org/ru/docs/WebSockets;Документация MDN;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://developer.mozilla.org/ru/docs/WebSockets;Туториал на MDN;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://developer.mozilla.org/ru/docs/WebSockets;socket.io - самая популярная библиотека для создания веб-приложений на WebSockets;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications;Документация MDN;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications;Туториал на MDN;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications;socket.io - самая популярная библиотека для создания веб-приложений на WebSockets;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://socket.io/;Документация MDN;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://socket.io/;Туториал на MDN;;;
146;WebSockets;146;Y;;;;Вебсокеты (WebSockets) - это продвинутая технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером. С помощью его API вы можете отправить сообщение на сервер и получить ответ без выполнения http запроса, причем этот процесс будет событийно-управляемым.;text;;;text;;500;;Middle;https://socket.io/;socket.io - самая популярная библиотека для создания веб-приложений на WebSockets;;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://jestjs.io/docs/en/getting-started;Официальная документация;;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://jestjs.io/docs/en/getting-started;"Academind - ""JavaScript Testing Introduction Tutorial - Unit Tests, Integration Tests & e2e Tests""";;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://jestjs.io/docs/en/getting-started;"Academind - ""JavaScript Testing - Mocking Async Code""";;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=r9HdJ8P6GQI&t=1344s;Официальная документация;;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=r9HdJ8P6GQI&t=1344s;"Academind - ""JavaScript Testing Introduction Tutorial - Unit Tests, Integration Tests & e2e Tests""";;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=r9HdJ8P6GQI&t=1344s;"Academind - ""JavaScript Testing - Mocking Async Code""";;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=4Fl5GH4eYZ8;Официальная документация;;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=4Fl5GH4eYZ8;"Academind - ""JavaScript Testing Introduction Tutorial - Unit Tests, Integration Tests & e2e Tests""";;;
147;Jest;147;Y;;;;Jest — архитектурный подход или набор шаблонов программирования для построения пользовательского интерфейса веб-приложений, сочетающийся с реактивным программированием и построенный на однонаправленных потоках данных. Согласно замыслу создателей и несмотря на то, что Facebook предоставил реализацию Flux в дополнение к React, Flux не является ещё одним веб-фреймворком, а является архитектурным решением.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=4Fl5GH4eYZ8;"Academind - ""JavaScript Testing - Mocking Async Code""";;;
148;RxJS;148;Y;;;;RxJS - это библиотека для работы с асинхронными и основанными на событиях программами с использованием наблюдаемых последовательностей. Библиотека предоставляет основной тип Observable, несколько вспомогательных типов (Observer, Schedulers, Subjects) и операторы работы с событиями как с коллекциями (map, filter, reduce, every и подобные из JavaScript Array).;text;;;text;;500;;Middle+;https://rxjs-dev.firebaseapp.com/guide/overview;Официальная документация;;;
148;RxJS;148;Y;;;;RxJS - это библиотека для работы с асинхронными и основанными на событиях программами с использованием наблюдаемых последовательностей. Библиотека предоставляет основной тип Observable, несколько вспомогательных типов (Observer, Schedulers, Subjects) и операторы работы с событиями как с коллекциями (map, filter, reduce, every и подобные из JavaScript Array).;text;;;text;;500;;Middle+;https://rxjs-dev.firebaseapp.com/guide/overview;"Academind - ""Understanding RxJS""";;;
148;RxJS;148;Y;;;;RxJS - это библиотека для работы с асинхронными и основанными на событиях программами с использованием наблюдаемых последовательностей. Библиотека предоставляет основной тип Observable, несколько вспомогательных типов (Observer, Schedulers, Subjects) и операторы работы с событиями как с коллекциями (map, filter, reduce, every и подобные из JavaScript Array).;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=T9wOu11uU6U&list=PL55RiY5tL51pHpagYcrN9ubNLVXF8rGVi;Официальная документация;;;
148;RxJS;148;Y;;;;RxJS - это библиотека для работы с асинхронными и основанными на событиях программами с использованием наблюдаемых последовательностей. Библиотека предоставляет основной тип Observable, несколько вспомогательных типов (Observer, Schedulers, Subjects) и операторы работы с событиями как с коллекциями (map, filter, reduce, every и подобные из JavaScript Array).;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=T9wOu11uU6U&list=PL55RiY5tL51pHpagYcrN9ubNLVXF8rGVi;"Academind - ""Understanding RxJS""";;;
149;Next.js;149;Y;;;;Next.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. По сути это Server Side Rendering для React с возможностью генерации статиеских сборок.;text;;;text;;500;;Middle+;https://nextjs.org/docs;Официальная документация;;;
149;Next.js;149;Y;;;;Next.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. По сути это Server Side Rendering для React с возможностью генерации статиеских сборок.;text;;;text;;500;;Middle+;https://nextjs.org/docs;Статья на Medium;;;
149;Next.js;149;Y;;;;Next.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. По сути это Server Side Rendering для React с возможностью генерации статиеских сборок.;text;;;text;;500;;Middle+;https://medium.com/@ivaneroshkin/next-js-server-side-rendering-%D0%B4%D0%BB%D1%8F-react-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9-f5f61e20dc8c;Официальная документация;;;
149;Next.js;149;Y;;;;Next.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. По сути это Server Side Rendering для React с возможностью генерации статиеских сборок.;text;;;text;;500;;Middle+;https://medium.com/@ivaneroshkin/next-js-server-side-rendering-%D0%B4%D0%BB%D1%8F-react-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9-f5f61e20dc8c;Статья на Medium;;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://nuxtjs.org/guide;Официальная документация;;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://nuxtjs.org/guide;Статья на Medium;;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://nuxtjs.org/guide;"Academind - ""Nuxt.js & Storyblok - Building a Complete Blog""";;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51pk1RvaQOxI6sJ-yZzExzJn;Официальная документация;;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51pk1RvaQOxI6sJ-yZzExzJn;Статья на Medium;;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51pk1RvaQOxI6sJ-yZzExzJn;"Academind - ""Nuxt.js & Storyblok - Building a Complete Blog""";;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51pk1RvaQOxI6sJ-yZzExzJn;Официальная документация;;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51pk1RvaQOxI6sJ-yZzExzJn;Статья на Medium;;;
150;Nuxt.js;150;Y;;;;Nuxt.js представляет собой облегченный фреймворк для статических и обработанных сервером приложений React. Как Next.js, только не так.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PL55RiY5tL51pk1RvaQOxI6sJ-yZzExzJn;"Academind - ""Nuxt.js & Storyblok - Building a Complete Blog""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://graphql.org/learn/;Официальная документация;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://graphql.org/learn/;Небольшое введение в GraphQL от Tproger;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://graphql.org/learn/;"webDev - ""GraphQL""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://graphql.org/learn/;"freeCodeCamp.org - ""GraphQL Full Course - Novice to Expert""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://graphql.org/learn/;WesBos - FullStack Advanced React + GraphQL;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://tproger.ru/translations/graphql-beginners-guide/;Официальная документация;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://tproger.ru/translations/graphql-beginners-guide/;Небольшое введение в GraphQL от Tproger;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://tproger.ru/translations/graphql-beginners-guide/;"webDev - ""GraphQL""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://tproger.ru/translations/graphql-beginners-guide/;"freeCodeCamp.org - ""GraphQL Full Course - Novice to Expert""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://tproger.ru/translations/graphql-beginners-guide/;WesBos - FullStack Advanced React + GraphQL;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PLNkWIWHIRwMF2sVLwzRef0Cu5kzAOeRcu;Официальная документация;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PLNkWIWHIRwMF2sVLwzRef0Cu5kzAOeRcu;Небольшое введение в GraphQL от Tproger;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PLNkWIWHIRwMF2sVLwzRef0Cu5kzAOeRcu;"webDev - ""GraphQL""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PLNkWIWHIRwMF2sVLwzRef0Cu5kzAOeRcu;"freeCodeCamp.org - ""GraphQL Full Course - Novice to Expert""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/playlist?list=PLNkWIWHIRwMF2sVLwzRef0Cu5kzAOeRcu;WesBos - FullStack Advanced React + GraphQL;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=ed8SzALpx1Q&t=1890s;Официальная документация;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=ed8SzALpx1Q&t=1890s;Небольшое введение в GraphQL от Tproger;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=ed8SzALpx1Q&t=1890s;"webDev - ""GraphQL""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=ed8SzALpx1Q&t=1890s;"freeCodeCamp.org - ""GraphQL Full Course - Novice to Expert""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=ed8SzALpx1Q&t=1890s;WesBos - FullStack Advanced React + GraphQL;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://coursehunters.net/course/full-stack-prodvinutyy-react-graphql;Официальная документация;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://coursehunters.net/course/full-stack-prodvinutyy-react-graphql;Небольшое введение в GraphQL от Tproger;;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://coursehunters.net/course/full-stack-prodvinutyy-react-graphql;"webDev - ""GraphQL""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://coursehunters.net/course/full-stack-prodvinutyy-react-graphql;"freeCodeCamp.org - ""GraphQL Full Course - Novice to Expert""";;;
151;GraphQL;151;Y;;;;GraphQL - язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.;text;;;text;;500;;Middle+;https://coursehunters.net/course/full-stack-prodvinutyy-react-graphql;WesBos - FullStack Advanced React + GraphQL;;;
152;Firebase;152;Y;;;;Firebase — американская компания, поставщик облачных услуг, основанная в 2011 году Эндрю Ли и Джеймсом Тэмплином, и поглощённая в 2014 году корпорацией Google. Основной сервис — облачная СУБД класса NoSQL, позволяющая разработчикам приложений хранить и синхронизировать данные между несколькими клиентами. Поддержаны особенности интеграции с приложениями под операционные системы Android и iOS, реализовано API для приложений на JavaScript, Java, Objective-C и Node.js, также возможно работать напрямую с базой данных в стиле REST из ряда JavaScript-фреймворков, включая AngularJS, React, Vue.js, Ember.js и Backbone.js. Предусмотрено API для шифрования данных. Среди других услуг, предоставлявшихся компанией — запущенный 13 мая 2014 года хостинг для хранения статических файлов (таких как CSS, HTML, JavaScript), обеспечивающий доставку через CDN и сервис аутентификации клиента с использованием кода только на стороне клиента с поддержкой входа через Facebook, GitHub, Twitter и Google (Firebase Simple Login).;text;;;text;;500;;Middle+;https://firebase.google.com/docs;Официальная документация;;;
152;Firebase;152;Y;;;;Firebase — американская компания, поставщик облачных услуг, основанная в 2011 году Эндрю Ли и Джеймсом Тэмплином, и поглощённая в 2014 году корпорацией Google. Основной сервис — облачная СУБД класса NoSQL, позволяющая разработчикам приложений хранить и синхронизировать данные между несколькими клиентами. Поддержаны особенности интеграции с приложениями под операционные системы Android и iOS, реализовано API для приложений на JavaScript, Java, Objective-C и Node.js, также возможно работать напрямую с базой данных в стиле REST из ряда JavaScript-фреймворков, включая AngularJS, React, Vue.js, Ember.js и Backbone.js. Предусмотрено API для шифрования данных. Среди других услуг, предоставлявшихся компанией — запущенный 13 мая 2014 года хостинг для хранения статических файлов (таких как CSS, HTML, JavaScript), обеспечивающий доставку через CDN и сервис аутентификации клиента с использованием кода только на стороне клиента с поддержкой входа через Facebook, GitHub, Twitter и Google (Firebase Simple Login).;text;;;text;;500;;Middle+;https://firebase.google.com/docs;"Academind - ""FULL PROJECT with Vue.js + Vuetify + Firebase""";;;
152;Firebase;152;Y;;;;Firebase — американская компания, поставщик облачных услуг, основанная в 2011 году Эндрю Ли и Джеймсом Тэмплином, и поглощённая в 2014 году корпорацией Google. Основной сервис — облачная СУБД класса NoSQL, позволяющая разработчикам приложений хранить и синхронизировать данные между несколькими клиентами. Поддержаны особенности интеграции с приложениями под операционные системы Android и iOS, реализовано API для приложений на JavaScript, Java, Objective-C и Node.js, также возможно работать напрямую с базой данных в стиле REST из ряда JavaScript-фреймворков, включая AngularJS, React, Vue.js, Ember.js и Backbone.js. Предусмотрено API для шифрования данных. Среди других услуг, предоставлявшихся компанией — запущенный 13 мая 2014 года хостинг для хранения статических файлов (таких как CSS, HTML, JavaScript), обеспечивающий доставку через CDN и сервис аутентификации клиента с использованием кода только на стороне клиента с поддержкой входа через Facebook, GitHub, Twitter и Google (Firebase Simple Login).;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=FXY1UyQfSFw&list=PL55RiY5tL51qxUbODJG9cgrsVd7ZHbPrt;Официальная документация;;;
152;Firebase;152;Y;;;;Firebase — американская компания, поставщик облачных услуг, основанная в 2011 году Эндрю Ли и Джеймсом Тэмплином, и поглощённая в 2014 году корпорацией Google. Основной сервис — облачная СУБД класса NoSQL, позволяющая разработчикам приложений хранить и синхронизировать данные между несколькими клиентами. Поддержаны особенности интеграции с приложениями под операционные системы Android и iOS, реализовано API для приложений на JavaScript, Java, Objective-C и Node.js, также возможно работать напрямую с базой данных в стиле REST из ряда JavaScript-фреймворков, включая AngularJS, React, Vue.js, Ember.js и Backbone.js. Предусмотрено API для шифрования данных. Среди других услуг, предоставлявшихся компанией — запущенный 13 мая 2014 года хостинг для хранения статических файлов (таких как CSS, HTML, JavaScript), обеспечивающий доставку через CDN и сервис аутентификации клиента с использованием кода только на стороне клиента с поддержкой входа через Facebook, GitHub, Twitter и Google (Firebase Simple Login).;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=FXY1UyQfSFw&list=PL55RiY5tL51qxUbODJG9cgrsVd7ZHbPrt;"Academind - ""FULL PROJECT with Vue.js + Vuetify + Firebase""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=H4Hf3pji7Fw&list=PLngnoZX8cAn8XyTsN7_A1gTIQ15SNcKQS;"Development play pays - ""TDD vs BDD. Test Driven Development vs Behaviour Driven Development""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=H4Hf3pji7Fw&list=PLngnoZX8cAn8XyTsN7_A1gTIQ15SNcKQS;" Development play pays - ""TDD vs BDD. Death Match""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=H4Hf3pji7Fw&list=PLngnoZX8cAn8XyTsN7_A1gTIQ15SNcKQS;"Статья на Medium - ""TDD / BDD with JavaScript""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=4sgTIVLGPAk&list=PLngnoZX8cAn-rZpWzX4TFlNbNLJRTKKDm;"Development play pays - ""TDD vs BDD. Test Driven Development vs Behaviour Driven Development""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=4sgTIVLGPAk&list=PLngnoZX8cAn-rZpWzX4TFlNbNLJRTKKDm;" Development play pays - ""TDD vs BDD. Death Match""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://www.youtube.com/watch?v=4sgTIVLGPAk&list=PLngnoZX8cAn-rZpWzX4TFlNbNLJRTKKDm;"Статья на Medium - ""TDD / BDD with JavaScript""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://medium.com/@ryuta_udo/tdd-bdd-with-javascript-3dde511e4e2f;"Development play pays - ""TDD vs BDD. Test Driven Development vs Behaviour Driven Development""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://medium.com/@ryuta_udo/tdd-bdd-with-javascript-3dde511e4e2f;" Development play pays - ""TDD vs BDD. Death Match""";;;
153;TDD / BDD;153;Y;;;;TDD и BDD - методики разработки ПО через тестирование. Концепции обоих подходов похожи, сначала идут тесты и только потом начинается разработка, но предназначение у них совершенно разное. TDD — это больше о программировании и тестировании на уровне технической реализации продукта, когда тесты создают сами разработчики. BDD предполагает описание тестировщиком или аналитиком пользовательских сценариев на естественном языке — если можно так выразиться, на языке бизнеса.;text;;;text;;500;;Middle+;https://medium.com/@ryuta_udo/tdd-bdd-with-javascript-3dde511e4e2f;"Статья на Medium - ""TDD / BDD with JavaScript""";;;
154;WebGL;154;Y;;;;WebGL — кроссплатформенный API для 3D-графики в браузере, разрабатываемый некоммерческой организацией Khronos Group. WebGL использует язык программирования шейдеров GLSL. WebGL исполняется как элемент HTML5 и поэтому является полноценной частью объектной модели документа (DOM API) браузера. Может использоваться с любыми языками программирования, которые умеют работать с DOM API, например, JavaScript, Rust, Java, Kotlin и другими. Все ведущие разработчики браузеров Google (Chrome), Opera (Opera), Mozilla (Firefox), и Apple (Safari), являются членами Khronos и реализуют WebGL в своих браузерах. За счёт использования низкоуровневых средств поддержки OpenGL часть кода на WebGL может выполняться непосредственно на видеокартах. WebGL — это контекст элемента canvas HTML, который обеспечивает API 3D графики без использования плагинов. Первая спецификация была выпущена 3 марта 2011 года. Современная версия 2.0 (несовместима с версией 1.0) доступна с 27 февраля 2017 года.;text;;;text;;500;;Senior;;;;;
155;Javascript engines;155;Y;;;;V8 / SpiderMonkey / Chakra - Движки JavaScript — специализированные программы, обрабатывающие JavaScript, в частности, в браузерах (а также в nodejs, если говорить про v8);text;;;text;;500;;Senior;;;;;
156;Protobuf;156;Y;;;;;text;;Протокол сериализации (передачи) структурированных данных, предложенный Google как эффективная бинарная альтернатива текстовому формату XML. Разработчики сообщают, что Protocol Buffers проще, компактнее и быстрее, чем XML, поскольку осуществляется передача бинарных данных, оптимизированных под минимальный размер сообщения.;text;;500;;Senior;;;;;
157;gRPC;157;Y;;;;gRPC - это система удаленного вызова процедур с открытым исходным кодом, изначально разработанная в Google.;text;;;text;;500;;Senior;;;;;
158;P2P;158;Y;;;;P2P - одноранговая, децентрализованная, или пиринговая (англ. peer-to-peer, P2P — равный к равному) сеть — оверлейная компьютерная сеть, основанная на равноправии участников. Часто в такой сети отсутствуют выделенные серверы, а каждый узел (peer) является как клиентом, так и выполняет функции сервера. В отличие от архитектуры клиент-сервера, такая организация позволяет сохранять работоспособность сети при любом количестве и любом сочетании доступных узлов. Участниками сети являются все пиры.;text;;;text;;500;;Senior;;;;;
159;WebRTC;159;Y;;;;WebRTC (Web Real Time Communications) — это стандарт, который описывает передачу потоковых аудиоданных, видеоданных и контента от браузера и к браузеру в режиме реального времени без установки плагинов или иных расширений. Стандарт позволяет превратить браузер в оконечный терминал видеоконференцсвязи, достаточно просто открыть веб-страницу, чтобы начать общение.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PL1QRvYV-LXn7Mdt7pKOdp7gircj8CwMgk;Let's Write Code - P2P / WebRTC;;;
159;WebRTC;159;Y;;;;WebRTC (Web Real Time Communications) — это стандарт, который описывает передачу потоковых аудиоданных, видеоданных и контента от браузера и к браузеру в режиме реального времени без установки плагинов или иных расширений. Стандарт позволяет превратить браузер в оконечный терминал видеоконференцсвязи, достаточно просто открыть веб-страницу, чтобы начать общение.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PL1QRvYV-LXn7Mdt7pKOdp7gircj8CwMgk;Trueconf - WebRTC;;;
159;WebRTC;159;Y;;;;WebRTC (Web Real Time Communications) — это стандарт, который описывает передачу потоковых аудиоданных, видеоданных и контента от браузера и к браузеру в режиме реального времени без установки плагинов или иных расширений. Стандарт позволяет превратить браузер в оконечный терминал видеоконференцсвязи, достаточно просто открыть веб-страницу, чтобы начать общение.;text;;;text;;500;;Senior;https://trueconf.ru/webrtc.html;Let's Write Code - P2P / WebRTC;;;
159;WebRTC;159;Y;;;;WebRTC (Web Real Time Communications) — это стандарт, который описывает передачу потоковых аудиоданных, видеоданных и контента от браузера и к браузеру в режиме реального времени без установки плагинов или иных расширений. Стандарт позволяет превратить браузер в оконечный терминал видеоконференцсвязи, достаточно просто открыть веб-страницу, чтобы начать общение.;text;;;text;;500;;Senior;https://trueconf.ru/webrtc.html;Trueconf - WebRTC;;;
160;Nodejs IoT;160;Y;;;;IoT (Internet of Things) - интернет вещей — это сеть связанных через интернет объектов, способных собирать данные и обмениваться данными, поступающими со встроенных сервисов. Устройства, входящие в интернет вещей, — любые автономные устройства, подключённые к интернету, которые могут отслеживаться и/или управляться удалённо.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLbW_am_GRTo2O5xTDsVsVX2JX7S4Z6Pvt;IOT Nodejs;;;
160;Nodejs IoT;160;Y;;;;IoT (Internet of Things) - интернет вещей — это сеть связанных через интернет объектов, способных собирать данные и обмениваться данными, поступающими со встроенных сервисов. Устройства, входящие в интернет вещей, — любые автономные устройства, подключённые к интернету, которые могут отслеживаться и/или управляться удалённо.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLbW_am_GRTo2O5xTDsVsVX2JX7S4Z6Pvt;Nodebot Workshop;;;
160;Nodejs IoT;160;Y;;;;IoT (Internet of Things) - интернет вещей — это сеть связанных через интернет объектов, способных собирать данные и обмениваться данными, поступающими со встроенных сервисов. Устройства, входящие в интернет вещей, — любые автономные устройства, подключённые к интернету, которые могут отслеживаться и/или управляться удалённо.;text;;;text;;500;;Senior;https://github.com/tableflip/nodebot-workshop;IOT Nodejs;;;
160;Nodejs IoT;160;Y;;;;IoT (Internet of Things) - интернет вещей — это сеть связанных через интернет объектов, способных собирать данные и обмениваться данными, поступающими со встроенных сервисов. Устройства, входящие в интернет вещей, — любые автономные устройства, подключённые к интернету, которые могут отслеживаться и/или управляться удалённо.;text;;;text;;500;;Senior;https://github.com/tableflip/nodebot-workshop;Nodebot Workshop;;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLrCZzMib1e9rx3HmaLQfLYb9ociIvYOY1;"Технострим Mailru - ""Администрирование Linux""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLrCZzMib1e9rx3HmaLQfLYb9ociIvYOY1;"ADV-IT- ""Linux для НЕ Начинающих""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLrCZzMib1e9rx3HmaLQfLYb9ociIvYOY1;"""Ядро Линукс - Описание процесса разработки""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLrCZzMib1e9rx3HmaLQfLYb9ociIvYOY1;Linux From Scratch - Пошаговая инструкция по сборке собственного дистрибутива;;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLg5SS_4L6LYsgy5qLYZtvoaV34zn5iKPe;"Технострим Mailru - ""Администрирование Linux""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLg5SS_4L6LYsgy5qLYZtvoaV34zn5iKPe;"ADV-IT- ""Linux для НЕ Начинающих""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLg5SS_4L6LYsgy5qLYZtvoaV34zn5iKPe;"""Ядро Линукс - Описание процесса разработки""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLg5SS_4L6LYsgy5qLYZtvoaV34zn5iKPe;Linux From Scratch - Пошаговая инструкция по сборке собственного дистрибутива;;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://www.mustitz.net/attachments/download/525/%D0%AF%D0%B4%D1%80%D0%BE_Linux._%D0%9E%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8._3-%D0%B5_%D0%B8%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5.pdf;"Технострим Mailru - ""Администрирование Linux""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://www.mustitz.net/attachments/download/525/%D0%AF%D0%B4%D1%80%D0%BE_Linux._%D0%9E%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8._3-%D0%B5_%D0%B8%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5.pdf;"ADV-IT- ""Linux для НЕ Начинающих""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://www.mustitz.net/attachments/download/525/%D0%AF%D0%B4%D1%80%D0%BE_Linux._%D0%9E%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8._3-%D0%B5_%D0%B8%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5.pdf;"""Ядро Линукс - Описание процесса разработки""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://www.mustitz.net/attachments/download/525/%D0%AF%D0%B4%D1%80%D0%BE_Linux._%D0%9E%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8._3-%D0%B5_%D0%B8%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5.pdf;Linux From Scratch - Пошаговая инструкция по сборке собственного дистрибутива;;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://linuxfromscratch.org/;"Технострим Mailru - ""Администрирование Linux""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://linuxfromscratch.org/;"ADV-IT- ""Linux для НЕ Начинающих""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://linuxfromscratch.org/;"""Ядро Линукс - Описание процесса разработки""";;;
161;Linux (advanced);161;Y;;;;Linux - семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Понимание основ Linux и умение пользоваться системой - важный аспект в работе веб-разработчика. Умение конфигурировать и администрировать сревера Linux - частая задача.;text;;;text;;500;;Senior;http://linuxfromscratch.org/;Linux From Scratch - Пошаговая инструкция по сборке собственного дистрибутива;;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://ru.wikipedia.org/wiki/%D0%92%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%B5%D1%82%D1%8C;Википедия (не смешно, там действительно много информации на эту тему);;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://ru.wikipedia.org/wiki/%D0%92%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%B5%D1%82%D1%8C;"Андрей Созыкин - Учебный курс ""Компьютерные сети""";;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://ru.wikipedia.org/wiki/%D0%92%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%B5%D1%82%D1%8C;"Курс на ProgLib - ""Лучший видеокурс по сетевым технологиям""";;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLtPJ9lKvJ4oiNMvYbOzCmWy6cRzYAh9B1;Википедия (не смешно, там действительно много информации на эту тему);;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLtPJ9lKvJ4oiNMvYbOzCmWy6cRzYAh9B1;"Андрей Созыкин - Учебный курс ""Компьютерные сети""";;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://www.youtube.com/playlist?list=PLtPJ9lKvJ4oiNMvYbOzCmWy6cRzYAh9B1;"Курс на ProgLib - ""Лучший видеокурс по сетевым технологиям""";;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://proglib.io/p/networks-course/;Википедия (не смешно, там действительно много информации на эту тему);;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://proglib.io/p/networks-course/;"Андрей Созыкин - Учебный курс ""Компьютерные сети""";;;
162;Network (advanced);162;Y;;;;Компьютерные сети - это система, обеспечивающая обмен данными между вычислительными устройствами (компьютеры, серверы, маршрутизаторы и другое оборудование). Для передачи информации могут быть использованы различные среды.;text;;;text;;500;;Senior;https://proglib.io/p/networks-course/;"Курс на ProgLib - ""Лучший видеокурс по сетевым технологиям""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=i3yoZca-KjE;"Roman Brovko - ""Погружение в СУБД""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=i3yoZca-KjE;"Postgres Professional - Учебный курс ""Оптимизация SQL запросов""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=i3yoZca-KjE;Postgres Professional - Posgres DBA2. Администрирование PostgreSQL 10. Настройка и мониторинг;;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=i3yoZca-KjE;Postgres Professional - Posgres DBA3. Администрирование PostgreSQL 10. Резервное копирование и репликация;;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=aWEY8iZ_ANg&list=PLaFqU3KCWw6K2sTAksX5AJq4SQDN5PA1t;"Roman Brovko - ""Погружение в СУБД""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=aWEY8iZ_ANg&list=PLaFqU3KCWw6K2sTAksX5AJq4SQDN5PA1t;"Postgres Professional - Учебный курс ""Оптимизация SQL запросов""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=aWEY8iZ_ANg&list=PLaFqU3KCWw6K2sTAksX5AJq4SQDN5PA1t;Postgres Professional - Posgres DBA2. Администрирование PostgreSQL 10. Настройка и мониторинг;;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=aWEY8iZ_ANg&list=PLaFqU3KCWw6K2sTAksX5AJq4SQDN5PA1t;Postgres Professional - Posgres DBA3. Администрирование PostgreSQL 10. Резервное копирование и репликация;;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=UihLzyr2o2g&list=PLaFqU3KCWw6KycrRthIC6mESoLLQen1k6;"Roman Brovko - ""Погружение в СУБД""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=UihLzyr2o2g&list=PLaFqU3KCWw6KycrRthIC6mESoLLQen1k6;"Postgres Professional - Учебный курс ""Оптимизация SQL запросов""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=UihLzyr2o2g&list=PLaFqU3KCWw6KycrRthIC6mESoLLQen1k6;Postgres Professional - Posgres DBA2. Администрирование PostgreSQL 10. Настройка и мониторинг;;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=UihLzyr2o2g&list=PLaFqU3KCWw6KycrRthIC6mESoLLQen1k6;Postgres Professional - Posgres DBA3. Администрирование PostgreSQL 10. Резервное копирование и репликация;;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=V6xYnuK-7PU&list=PLaFqU3KCWw6KEakTSrRWrekNI-z9U1ypF;"Roman Brovko - ""Погружение в СУБД""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=V6xYnuK-7PU&list=PLaFqU3KCWw6KEakTSrRWrekNI-z9U1ypF;"Postgres Professional - Учебный курс ""Оптимизация SQL запросов""";;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=V6xYnuK-7PU&list=PLaFqU3KCWw6KEakTSrRWrekNI-z9U1ypF;Postgres Professional - Posgres DBA2. Администрирование PostgreSQL 10. Настройка и мониторинг;;;
163;Databases (advanced);163;Y;;;;"Более глубокое понимание баз данных даёт более глубокое понимание работы структур данных, движков и прочих ""сложных"" вещей в мире IT";text;;;text;;500;;Senior;https://www.youtube.com/watch?v=V6xYnuK-7PU&list=PLaFqU3KCWw6KEakTSrRWrekNI-z9U1ypF;Postgres Professional - Posgres DBA3. Администрирование PostgreSQL 10. Резервное копирование и репликация;;;
164;React Native;164;Y;;;;React Native — это фреймворк для разработки кроссплатформенных приложений. Он даёт возможность создавать и использовать компоненты точно так же, как обычно мы это делаем в React, вот только рендериться они будут не в HTML, а в нативные контролы операционной системы, под которую будет собрано наше приложение.;text;;;text;;500;;Senior;https://facebook.github.io/react-native/docs/getting-started;Официальная документация;;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://electronjs.org/docs;Официальная документация;;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://electronjs.org/docs;"Traversy Media - ""Build an Electron App in Under 60 Minutes""";;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://electronjs.org/docs;Elementary Electron;;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://www.youtube.com/watch?v=kN1Czs0m1SU;Официальная документация;;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://www.youtube.com/watch?v=kN1Czs0m1SU;"Traversy Media - ""Build an Electron App in Under 60 Minutes""";;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://www.youtube.com/watch?v=kN1Czs0m1SU;Elementary Electron;;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://github.com/maxogden/elementary-electron;Официальная документация;;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://github.com/maxogden/elementary-electron;"Traversy Media - ""Build an Electron App in Under 60 Minutes""";;;
165;Electron;165;Y;;;;Electron - фреймворк, разработанный GitHub. Позволяет разрабатывать нативные графические приложения для настольных операционных систем с помощью веб-технологий. Фреймворк включает в себя Node.js для работы с back-end и библиотеку рендеринга из Chromium.;text;;;text;;500;;Senior;https://github.com/maxogden/elementary-electron;Elementary Electron;;;
